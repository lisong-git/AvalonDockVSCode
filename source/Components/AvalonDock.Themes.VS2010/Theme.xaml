<!--
  ************************************************************************
  AvalonDock
  
  Copyright (C) 2007-2013 Xceed Software Inc.
  
  This program is provided to you under the terms of the Microsoft Public
  License (Ms-PL) as published at https://opensource.org/licenses/MS-PL
  ************************************************************************
-->

<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:avalonDock="clr-namespace:AvalonDock;assembly=AvalonDock"
  xmlns:avalonDockControls="clr-namespace:AvalonDock.Controls;assembly=AvalonDock"
  xmlns:avalonDockConverters="clr-namespace:AvalonDock.Converters;assembly=AvalonDock"
  xmlns:avalonDockLayout="clr-namespace:AvalonDock.Layout;assembly=AvalonDock"
  xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties;assembly=AvalonDock"
  xmlns:localThemes="clr-namespace:AvalonDock.Themes"
  xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=AvalonDock"
  xmlns:sys="clr-namespace:System;assembly=netstandard">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="Brushes.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="AvalonDock_ThemeVS2010_ToolButtonStyle" TargetType="ToggleButton">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor31}" />
        <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor31}" />
        <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="AvalonDock_ThemeVS2010_ButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor31}" />
        <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
      </Trigger>
    </Style.Triggers>
  </Style>


  <!--  DocumentPaneControlStyle  -->
  <Style x:Key="AvalonDock_ThemeVS2010_DocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor33}" />
    <Setter Property="BorderBrush" Value="{x:Null}" />
    <Setter Property="TabStripPlacement" Value="Left" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />
            <Grid
              Grid.Row="0"
              Panel.ZIndex="1"
              Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type avalonDockControls:LayoutDocumentPaneControl}}, Path=Model.ShowHeader, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>

              <avalonDockControls:DocumentPaneTabPanel
                x:Name="HeaderPanel"
                Grid.Row="0"
                Grid.Column="0"
                Margin="2,0,2,0"
                IsItemsHost="true"
                KeyboardNavigation.TabIndex="1" />
              <avalonDockControls:DropDownButton
                x:Name="MenuDropDownButton"
                Grid.Column="1"
                VerticalAlignment="Center"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ToolButtonStyle}">
                <avalonDockControls:DropDownButton.DropDownContextMenu>
                  <avalonDockControls:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                    <avalonDockControls:ContextMenuEx.ItemContainerStyle>
                      <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type avalonDockControls:MenuItemEx}">
                        <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}" />
                        <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}" />
                        <Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}" />
                        <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}" />
                        <Setter Property="Command" Value="{Binding Path=., Converter={avalonDockConverters:ActivateCommandLayoutItemFromLayoutModelConverter}}" />
                      </Style>
                    </avalonDockControls:ContextMenuEx.ItemContainerStyle>
                  </avalonDockControls:ContextMenuEx>
                </avalonDockControls:DropDownButton.DropDownContextMenu>
                <Image Source="Images/PinDocMenu.png" />
              </avalonDockControls:DropDownButton>
            </Grid>
            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Grid.Column="0"
              Padding="0,1,0,2"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Stretch"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              CornerRadius="3"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                Margin="0,2,0,2"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="MenuDropDownButton" Property="IsMouseOver" Value="True">
              <Setter TargetName="MenuDropDownButton" Property="Content">
                <Setter.Value>
                  <Image Source="Images/PinDocMenu_Black.png" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
              <Setter TargetName="MenuDropDownButton" Property="Content">
                <Setter.Value>
                  <Image Source="/Images/PinDocMenu_Black.png" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor31}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor30}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
              <Setter TargetName="MenuDropDownButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
          <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="ToolTip" Value="{Binding ToolTip}" />
          <Setter Property="Padding" Value="2,0,2,0" />
          <Setter Property="Margin" Value="2,0,2,0" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="Bd"
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="1,1,1,0"
                    CornerRadius="2,2,0,0">
                    <ContentPresenter
                      x:Name="Content"
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor33}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor16}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                    <Setter Property="Margin" Value="-1,0,-1,-4" />
                    <Setter TargetName="Content" Property="Margin" Value="0,0,0,3" />
                  </Trigger>
                  <DataTrigger Binding="{Binding IsActive}" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor31}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor25}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                  </DataTrigger>

                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsActive}" Value="False" />
                      <Condition Binding="{Binding IsLastFocusedDocument}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor30}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor24}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                  </MultiDataTrigger>

                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor14}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor6}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor13}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor9}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutDocumentTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutDocumentControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  ArrowToggleStyle  -->
  <Style
    x:Key="ArrowToggleStyle"
    BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
    TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border Background="{TemplateBinding Background}">
            <Grid>
              <ContentPresenter
                x:Name="content1"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{Binding Name}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Background" Value="Blue" />
              <!--<Setter TargetName="content1" Property="Visibility" Value="Hidden" />-->
            </Trigger>
            <!--<Trigger Property="IsChecked" Value="False">
              <Setter TargetName="content1" Property="Visibility" Value="Visible" />
            </Trigger>-->
            <!--<Trigger Property="local:ToolBarHelper.IsInOverflowPanel" Value="True">
                                <Setter TargetName="border" Property="Background" Value="Red" />
                                <Setter TargetName="border" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="local:ToolBarHelper.IsInOverflowPanel" Value="False">
                                <Setter TargetName="border" Property="Background" Value="Green" />
                                <Setter TargetName="border" Property="Visibility" Value="Hidden" />

                            </Trigger>-->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style
    x:Key="OverflowToggleStyle"
    BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
    TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border Background="{TemplateBinding Background}">
            <Grid>
              <ContentPresenter />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Background" Value="Blue" />
              <!--<Setter TargetName="content1" Property="Visibility" Value="Hidden" />-->
            </Trigger>
            <!--<Trigger Property="IsChecked" Value="False">
          <Setter TargetName="content1" Property="Visibility" Value="Visible" />
        </Trigger>-->
            <!--<Trigger Property="local:ToolBarHelper.IsInOverflowPanel" Value="True">
                            <Setter TargetName="border" Property="Background" Value="Red" />
                            <Setter TargetName="border" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="local:ToolBarHelper.IsInOverflowPanel" Value="False">
                            <Setter TargetName="border" Property="Background" Value="Green" />
                            <Setter TargetName="border" Property="Visibility" Value="Hidden" />

                        </Trigger>-->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="SimpleToolBar" TargetType="{x:Type ToolBar}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
        <!--  This trigger on a SystemParameter works because switching into high contrast mode requires a re-evaluation of theme  -->
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
      </DataTrigger>
    </Style.Triggers>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <Grid
            Name="Grid"
            Margin="0"
            SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Border
              x:Name="MainPanelBorder"
              Grid.Column="0"
              Padding="{TemplateBinding Padding}"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
              <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                <!--<Thumb
                                        x:Name="ToolBarThumb"
                                        Width="10"
                                        Margin="-3,-1,0,0"
                                        Padding="6,5,1,6"
                                        Visibility="Collapsed"
                                        />-->
                <ContentPresenter
                  x:Name="ToolBarHeader"
                  Margin="0,0,0,0"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  ContentSource="Header"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <ToolBarPanel
                  x:Name="PART_ToolBarPanel"
                  Margin="0"
                  IsItemsHost="true"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </DockPanel>
            </Border>
            <Grid
              x:Name="OverflowGrid"
              Grid.Column="1"
              MinWidth="24"
              HorizontalAlignment="Right"
              DockPanel.Dock="Right">
              <ToggleButton
                x:Name="OverflowButton"
                Width="24"
                Height="24"
                Background="{TemplateBinding Background}"
                ClickMode="Press"
                FocusVisualStyle="{x:Null}"
                IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                IsEnabled="{TemplateBinding HasOverflowItems}"
                Style="{StaticResource AvalonDock_ThemeVS2010_ToolButtonStyle}"
                Visibility="{Binding Path=HasOverflowItems, Converter={avalonDockConverters:BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                <!--  ic_fluent_more_horizontal_24_filled  -->
                <Path
                  Width="24"
                  Height="24"
                  Data="M8 12C8 13.1046 7.10457 14 6 14C4.89543 14 4 13.1046 4 12C4 10.8954 4.89543 10 6 10C7.10457 10 8 10.8954 8 12ZM14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12ZM18 14C19.1046 14 20 13.1046 20 12C20 10.8954 19.1046 10 18 10C16.8954 10 16 10.8954 16 12C16 13.1046 16.8954 14 18 14Z"
                  Fill="{TemplateBinding Foreground}"
                  Visibility="Visible" />
              </ToggleButton>
              <Popup
                x:Name="OverflowPopup"
                AllowsTransparency="true"
                Focusable="false"
                IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                StaysOpen="false">
                <!--<theme:SystemDropShadowChrome Name="Shdw"
                                                      Color="Transparent">-->
                <Border
                  x:Name="ToolBarSubMenuBorder"
                  BorderThickness="1"
                  RenderOptions.ClearTypeHint="Enabled">
                  <ToolBarOverflowPanel
                    x:Name="PART_ToolBarOverflowPanel"
                    Margin="0"
                    FocusVisualStyle="{x:Null}"
                    Focusable="true"
                    KeyboardNavigation.DirectionalNavigation="Cycle"
                    KeyboardNavigation.TabNavigation="Cycle"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    WrapWidth="48" />
                </Border>
                <!--</theme:SystemDropShadowChrome>-->
              </Popup>
            </Grid>
          </Grid>


          <ControlTemplate.Triggers>
            <!--<Trigger Property="IsOverflowOpen" Value="true">
                                <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
                            </Trigger>-->
            <Trigger Property="Header" Value="{x:Null}">
              <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <!--<Trigger Property="ToolBarTray.IsLocked" Value="true">
                                <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
                            </Trigger>-->
            <!--<Trigger SourceName="OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                                <Setter TargetName="Shdw" Property="SnapsToDevicePixels" Value="true" />
                                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                            </Trigger>-->
            <Trigger Property="Orientation" Value="Vertical">
              <Setter TargetName="Grid" Property="Margin" Value="0" />
              <!--<Setter TargetName="OverflowButton" Property="Style" Value="{StaticResource &#384;}" />-->
              <!--<Setter TargetName="ToolBarThumb" Property="Height" Value="10" />
                                <Setter TargetName="ToolBarThumb" Property="Width" Value="Auto" />
                                <Setter TargetName="ToolBarThumb" Property="Margin" Value="-1,-3,0,0" />
                                <Setter TargetName="ToolBarThumb" Property="Padding" Value="5,6,6,1" />-->
              <Setter TargetName="ToolBarHeader" Property="Margin" Value="0,0,0,0" />
              <Setter TargetName="PART_ToolBarPanel" Property="Margin" Value="0" />
              <!--<Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top" />-->
              <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="OverflowGrid" Property="HorizontalAlignment" Value="Stretch" />
              <Setter TargetName="OverflowGrid" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="OverflowPopup" Property="Placement" Value="Right" />
              <!--<Setter TargetName="MainPanelBorder" Property="Margin" Value="0,0,0,0" />-->
              <!--<Setter Property="Background" Value="Blue" />-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#region AvalonDock_ThemeVS2010_ActivityBarControlStyle-->
  <Style x:Key="AvalonDock_ThemeVS2010_ActivityBarControlStyle" TargetType="{x:Type avalonDockControls:LayoutActivityBarControl}">
    <Setter Property="TabStripPlacement" Value="Left" />
    <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <!--<Setter Property="SelectedItem" Value="{Binding Model.SelectedItem, RelativeSource={RelativeSource Self}}" />
		<Setter Property="SelectedIndex" Value="{Binding Model.SelectedIndex, RelativeSource={RelativeSource Self}}" />-->
    <Setter Property="Tag" Value="{Binding Model, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutActivityBarControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="64" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <!--  Following border is required to catch mouse events  -->

            <Border Grid.RowSpan="2" Background="Transparent" />

            <WrapPanel
              Grid.Row="0"
              Grid.Column="0"
              Background="Transparent"
              Orientation="Vertical">

              <DockPanel LastChildFill="True">
                <Grid
                  x:Name="OverflowGrid"
                  HorizontalAlignment="Right"
                  DockPanel.Dock="Bottom">
                  <ToggleButton
                    x:Name="OverflowButton"
                    Width="48"
                    Height="48"
                    Background="Red"
                    ClickMode="Press"
                    Content="Overflow"
                    FocusVisualStyle="{x:Null}"
                    IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource OverflowToggleStyle}" />

                  <Popup
                    x:Name="OverflowPopup"
                    AllowsTransparency="true"
                    Focusable="false"
                    IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Right"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                    StaysOpen="False"
                    Tag="{Binding Model.Children, RelativeSource={RelativeSource TemplatedParent}}">


                    <ListBox
                      MinWidth="64"
                      MinHeight="24"
                      DockPanel.Dock="Bottom"
                      ItemsSource="{Binding Model.OverflowItems, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Tag="{Binding Model.OverflowItems, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">

                      <!--<ListBoxItem Content="ListBox1"/>
											<ListBoxItem Content="ListBox2"/>
											<ListBoxItem Content="ListBox3"/>
											<ListBoxItem Content="ListBox4"/>
											<ListBoxItem Content="ListBox5"/>-->
                    </ListBox>

                  </Popup>
                </Grid>
                <ActivityBarTabPanel
                  x:Name="HeaderPanel"
                  Panel.ZIndex="1"
                  IsItemsHost="true"
                  KeyboardNavigation.TabIndex="1"
                  Visibility="Visible" />

              </DockPanel>

              <!--</Grid>-->

            </WrapPanel>

            <StackPanel Grid.Row="2" Width="48">
              <StackPanel.Resources>
                <Thickness x:Key="btnMargin">0,8,0,0</Thickness>
                <Brush x:Key="bgColor">WhiteSmoke</Brush>

              </StackPanel.Resources>
              <Button
                Width="48"
                Height="48"
                Margin="{StaticResource btnMargin}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Command="{Binding Model.TestCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <!--<Image
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Source="Images/DockAnchorableRight.PNG"
                  Stretch="None" />-->
                <!--  ic_fluent_apps_32_filled  -->
                <Path
                  Width="32"
                  Height="32"
                  Data="M24.8079 2.95386C23.5387 1.68465 21.4809 1.68465 20.2117 2.95386L16.999 6.16657C16.9547 4.41019 15.517 2.99997 13.75 2.99997H6.25C4.45507 2.99997 3 4.45504 3 6.24997V25.75C3 27.5449 4.45507 29 6.25 29L25.75 29C27.5449 29 29 27.5449 29 25.75V18.25C29 16.4858 27.5944 15.0499 25.842 15.0012L29.0505 11.7927C30.3197 10.5235 30.3197 8.4657 29.0505 7.1965L24.8079 2.95386ZM17 12.8237L19.1763 15H17V12.8237ZM15 15H5V6.24997C5 5.55961 5.55964 4.99997 6.25 4.99997H13.75C14.4404 4.99997 15 5.55961 15 6.24997V15ZM5 17H15V27H6.25C5.55964 27 5 26.4403 5 25.75V17ZM17 27V17H25.75C26.4404 17 27 17.5596 27 18.25V25.75C27 26.4403 26.4404 27 25.75 27H17Z"
                  Fill="{StaticResource bgColor}"
                  Visibility="Visible" />
              </Button>

              <Button
                Width="48"
                Height="48"
                Margin="{StaticResource btnMargin}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <!--<Image
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Source="Images/DockAnchorableLeft.PNG"
                  Stretch="None" />-->
                <!--  ic_fluent_apps_32_filled  -->
                <Path
                  Width="32"
                  Height="32"
                  Data="M28.8319 18.4719C29.0803 18.6528 29.2651 18.9076 29.3599 19.2C29.4578 19.4935 29.4609 19.8105 29.3689 20.1059C28.735 22.1325 27.6568 23.9921 26.2129 25.549C26.0044 25.7725 25.7318 25.9259 25.4325 25.988C25.1333 26.0501 24.8221 26.018 24.5419 25.8959L22.5869 25.0379C22.3736 24.943 22.1411 24.8992 21.9079 24.9099C21.6751 24.9235 21.4489 24.992 21.2479 25.1099C21.0463 25.2264 20.8752 25.389 20.7487 25.5844C20.6221 25.7797 20.5437 26.0024 20.5199 26.2339L20.2849 28.364C20.2509 28.667 20.1243 28.9522 19.9222 29.1805C19.7202 29.4089 19.4525 29.5694 19.1559 29.64C17.0793 30.1353 14.9154 30.1353 12.8389 29.64C12.5437 29.5702 12.2774 29.4105 12.0769 29.183C11.8755 28.9555 11.7488 28.6717 11.7139 28.3699L11.4789 26.2439C11.4381 25.882 11.2654 25.5477 10.9939 25.3049C10.7816 25.1176 10.5208 24.9942 10.2413 24.9489C9.96193 24.9036 9.6754 24.9383 9.41487 25.049L7.45887 25.9079C7.17944 26.0299 6.86911 26.0624 6.57046 26.001C6.27182 25.9396 5.9995 25.7873 5.79087 25.5649C4.34463 24.0064 3.26497 22.1444 2.63087 20.1149C2.53998 19.8214 2.54243 19.507 2.63787 19.2149C2.73266 18.9213 2.9178 18.6651 3.16687 18.4829L4.89187 17.2079C5.08036 17.0697 5.23363 16.8891 5.33929 16.6806C5.44495 16.4721 5.50001 16.2417 5.50001 16.0079C5.50001 15.7742 5.44495 15.5438 5.33929 15.3353C5.23363 15.1268 5.08036 14.9462 4.89187 14.808L3.16687 13.5349C2.92005 13.3551 2.73603 13.1022 2.64087 12.812C2.54411 12.5203 2.54062 12.2057 2.63087 11.9119C3.26477 9.88411 4.3441 8.02374 5.78987 6.46695C5.92957 6.31561 6.10006 6.19591 6.28987 6.11594C6.47508 6.03741 6.67419 5.99695 6.87536 5.99695C7.07653 5.99695 7.27566 6.03741 7.46087 6.11594L9.40687 6.97394C9.62107 7.06594 9.85384 7.10653 10.0865 7.09241C10.3192 7.07829 10.5454 7.00987 10.7469 6.89264C10.9484 6.77541 11.1196 6.61263 11.2469 6.41733C11.3742 6.22202 11.454 5.99962 11.4799 5.76794L11.7159 3.64594C11.748 3.33938 11.8765 3.0509 12.0829 2.82193C12.2892 2.5919 12.5622 2.43212 12.8639 2.36493C13.8974 2.13691 14.9516 2.01561 16.0099 2.00293C17.0619 2.015 18.1099 2.13631 19.1369 2.36493C19.4384 2.43203 19.7112 2.59204 19.917 2.82239C20.1228 3.05273 20.2511 3.3418 20.2839 3.64893L20.5199 5.76895C20.5449 6.00028 20.624 6.22247 20.7508 6.41757C20.8775 6.61267 21.0485 6.77521 21.2497 6.89203C21.4509 7.00885 21.6768 7.07666 21.9091 7.09003C22.1414 7.10339 22.3736 7.06191 22.5869 6.96893L24.5329 6.11194C24.8135 5.98983 25.125 5.95755 25.4247 6.0195C25.7244 6.08145 25.9977 6.23459 26.2069 6.45795C27.6519 8.01339 28.7306 9.87246 29.3639 11.8989C29.4554 12.1927 29.4529 12.5078 29.3566 12.8C29.2603 13.0923 29.0751 13.3471 28.8269 13.5289L27.1069 14.8009C26.9164 14.9386 26.7615 15.1196 26.6549 15.3289C26.4958 15.6427 26.4536 16.0028 26.5356 16.3448C26.6177 16.6868 26.8188 16.9885 27.1029 17.196L28.8319 18.4719ZM16 20C18.2091 20 20 18.2091 20 16C20 13.7909 18.2091 12 16 12C13.7909 12 12 13.7909 12 16C12 18.2091 13.7909 20 16 20Z"
                  Fill="{StaticResource bgColor}"
                  Visibility="Visible" />
              </Button>

              <Button
                Width="48"
                Height="48"
                Margin="0,8"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <!--<Image
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Source="Images/DockAnchorableRight.PNG"
                  Stretch="None" />-->
                <!--  ic_fluent_apps_32_filled  -->
                <Path
                  Width="32"
                  Height="32"
                  Data="M16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2ZM16 24.5C12.134 24.5 9 22.0714 9 18.4286C9 17.0873 10.0873 16 11.4286 16H20.5714C21.9127 16 23 17.0873 23 18.4286C23 22.0714 19.866 24.5 16 24.5ZM16 14.5C13.9289 14.5 12.25 12.8211 12.25 10.75C12.25 8.67893 13.9289 7 16 7C18.0711 7 19.75 8.67893 19.75 10.75C19.75 12.8211 18.0711 14.5 16 14.5Z"
                  Fill="{StaticResource bgColor}"
                  Visibility="Visible" />
              </Button>
            </StackPanel>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>

            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
            </DataTrigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="ToolTip" Value="{Binding ToolTip}" />


          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="Bd"
                    Padding="0,0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0"
                    CornerRadius="0,0,0,0">
                    <ContentPresenter
                      x:Name="Content"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor8}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                    <Setter Property="Margin" Value="0,-2,-1,0" />
                    <Setter TargetName="Content" Property="Margin" Value="0,1,0,0" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor14}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor6}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor13}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor9}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>

          <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>

        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutActivityTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableExpanderGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--<Style x:Key="AvalonDock_ThemeVS2010_ActivityBarControlStyle" TargetType="{x:Type avalonDockControls:LayoutActivityBarControl}">
    <Setter Property="TabStripPlacement" Value="Left" />
    <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutActivityBarControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="64" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
  -->
  <!--  Following border is required to catch mouse events  -->
  <!--
            <Border Grid.RowSpan="2" Background="Transparent" />

            <WrapPanel
              Grid.Row="0"
              Grid.Column="0"
              Background="Transparent"
              Orientation="Vertical">

  -->
  <!--<Grid Grid.Row="0" Background="Red">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>-->
  <!--
              <DockPanel LastChildFill="True">
                <Grid
                  x:Name="OverflowGrid"
                  HorizontalAlignment="Right"
                  DockPanel.Dock="Bottom">
                  <ToggleButton
                    x:Name="OverflowButton"
                    Width="480"
                    Height="48"
                    Background="Red"
                    ClickMode="Press"
                    Content="Overflow"
                    FocusVisualStyle="{x:Null}"
                    IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource OverflowToggleStyle}" />
  -->
  <!--  Visibility="{Binding Path=HasOverflowItems, Converter={avalonDockConverters:BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"  -->
  <!--  IsEnabled="{Binding Path=HasOverflowItems, Converter={avalonDockConverters:BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"  -->
  <!--

                  <Popup
                    x:Name="OverflowPopup"
                    AllowsTransparency="true"
                    Focusable="false"
                    IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Right"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                    StaysOpen="True"
                    Tag="{Binding Model.Children, RelativeSource={RelativeSource TemplatedParent}}">
  -->
  <!--<theme:SystemDropShadowChrome Name="Shdw"
                                          Color="Transparent">-->
  <!--<Border
                      x:Name="ToolBarSubMenuBorder"
                      BorderThickness="1"
                      RenderOptions.ClearTypeHint="Enabled">
											<ToolBarOverflowPanel
                        x:Name="PART_ToolBarOverflowPanel"
                        Margin="0"
                        FocusVisualStyle="{x:Null}"
                        Focusable="true"
                        KeyboardNavigation.DirectionalNavigation="Cycle"
                        KeyboardNavigation.TabNavigation="Cycle"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        WrapWidth="48" />
										</Border>-->
  <!--</theme:SystemDropShadowChrome>-->
  <!--
                    <StackPanel>
  -->
  <!--<ListBox
                      MinWidth="64"
                      MinHeight="24"
                      ItemsSource="{Binding Model.ChildrenOverflowing, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Tag="{Binding Model.ChildrenOverflowing,Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
											DockPanel.Dock="Bottom">

											<ListBoxItem Content="ListBox1"/>
											<ListBoxItem Content="ListBox2"/>
											<ListBoxItem Content="ListBox3"/>
											<ListBoxItem Content="ListBox4"/>
											<ListBoxItem Content="ListBox5"/>
                    </ListBox>-->
  <!--
                      <TextBlock
                        Padding="4"
                        Background="Green"
                        Text="{Binding Model.BindingTest, RelativeSource={RelativeSource TemplatedParent}}" />
                      <ListView
                        MinWidth="64"
                        MinHeight="24"
                        DataContext="{Binding Model.OverflowItems, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                        DockPanel.Dock="Bottom"
                        ItemsSource="{Binding Model.OverflowItems, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Tag="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}">
  -->
  <!--<ListViewItem Content="ListBox1"/>
												<ListViewItem Content="ListBox2"/>
												<ListViewItem Content="ListBox3"/>
												<ListViewItem Content="ListBox4"/>
												<ListViewItem Content="ListBox5"/>-->
  <!--
                      </ListView>
                    </StackPanel>
                  </Popup>
                </Grid>
                <ActivityBarTabPanel
                  x:Name="HeaderPanel"
                  Panel.ZIndex="1"
                  IsItemsHost="true"
                  KeyboardNavigation.TabIndex="1"
                  Visibility="Visible" />


								
              </DockPanel>
  -->
  <!--</Grid>-->
  <!--
            </WrapPanel>

            <StackPanel Grid.Row="2">
              <Button
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Command="{Binding Model.TestCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <Image
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Source="Images/DockAnchorableRight.PNG"
                  Stretch="None" />
              </Button>

              <Button
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <Image
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Source="Images/DockAnchorableLeft.PNG"
                  Stretch="None" />
              </Button>
              <Button
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <Image
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Source="Images/DockAnchorableRight.PNG"
                  Stretch="None" />
              </Button>
            </StackPanel>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>

  -->
  <!--<DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
							<Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
						</DataTrigger>-->
  <!--

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

  -->
  <!--<Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />

  -->
  <!--<Setter Property="ToolTip" Value="{Binding ToolTip}" />-->
  <!--

          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="Bd"
                    Padding="0,0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0"
                    CornerRadius="0,0,0,0">
                    <ContentPresenter
                      x:Name="Content"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor8}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                    <Setter Property="Margin" Value="0,-2,-1,0" />
                    <Setter TargetName="Content" Property="Margin" Value="0,1,0,0" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor14}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor6}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor13}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor9}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>

          <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>

        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutActivityTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>-->
  <!--

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableExpanderGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->



  <!--  region  PrimarySideBarStyle  -->
  <Style x:Key="AvalonDock_ThemeVS2010_AnchorableGroupBoxControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderGroupPaneControl}">
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderGroupPaneControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />

            <!--  x:Name="HeaderPanel"  -->
            <avalonDockControls:AnchorablePaneTabPanel
              x:Name="HeaderPanel"
              Grid.Row="2"
              Height="0"
              Margin="0"
              Background="Yellow"
              IsEnabled="True"
              IsItemsHost="true"
              Visibility="Visible" />

            <!--  x:Name="HeaderPanel"  -->
            <Grid Grid.Row="0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" MinWidth="16" />
                <ColumnDefinition Width="Auto" MinWidth="48" />
              </Grid.ColumnDefinitions>

              <TextBlock
                Grid.Column="0"
                Margin="8,4,4,0"
                VerticalAlignment="Center"
                Text="{Binding Path=Model.Title, RelativeSource={RelativeSource TemplatedParent}}" />

              <ToolBarTray Grid.Column="1" HorizontalAlignment="Right">
                <ToolBar Style="{DynamicResource SimpleToolBar}">
                  <ToggleButton
                    Width="24"
                    Height="24"
                    Content="1" />
                  <ToggleButton
                    Width="24"
                    Height="24"
                    Content="2" />
                  <ToggleButton
                    Width="24"
                    Height="24"
                    Content="3"
                    ToolBar.OverflowMode="Always" />
                </ToolBar>
              </ToolBarTray>
            </Grid>

            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Grid.Column="0"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle"
              Visibility="Visible">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                Margin="{TemplateBinding Padding}"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>

          </Grid>
          <!--<ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
            </DataTrigger>
          </ControlTemplate.Triggers>-->
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <!--<Setter Property="ToolTip" Value="{Binding ToolTip}" />-->
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="Bd"
                    Padding="1,0"
                    Background="Green"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0"
                    CornerRadius="0,0,0,0">

                    <ContentPresenter
                      x:Name="Content"
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor8}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                    <Setter Property="Margin" Value="0,-2,-1,0" />
                    <Setter TargetName="Content" Property="Margin" Value="0,1,0,0" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor14}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor6}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor13}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor9}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableExpanderGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

  </Style>
  <!--#endregion-->

  <!--#region SecondarySideBarStyle-->
  <Style x:Key="AvalonDock_ThemeVS2010_AnchorableExpanderGroupPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderGroupPaneControl}">
    <Setter Property="TabStripPlacement" Value="Bottom" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderGroupPaneControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />
            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Grid.Column="0"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle"
              Visibility="Visible">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                Margin="{TemplateBinding Padding}"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <avalonDockControls:AnchorablePaneTabPanel
              x:Name="HeaderPanel"
              Grid.Row="0"
              Margin="4,0,0,4"
              Panel.ZIndex="1"
              IsItemsHost="true"
              KeyboardNavigation.TabIndex="1"
              Visibility="Visible" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <!--<Setter Property="ToolTip" Value="{Binding ToolTip}" />-->
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="Bd"
                    Padding="0,0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0"
                    CornerRadius="0,0,0,0">
                    <!--  Padding="{TemplateBinding Padding}"  -->

                    <ContentPresenter
                      x:Name="Content"
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <!--  Margin="2,2,2,2"  -->

                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor8}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                    <Setter Property="Margin" Value="0,-2,-1,0" />
                    <Setter TargetName="Content" Property="Margin" Value="0,1,0,0" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor14}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor6}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor13}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor9}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <!--<Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>-->
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableExpanderGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--#endregion-->

  <!--#region PanelControlStyle-->
  <Style x:Key="PanelStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderGroupPaneControl}">
    <Setter Property="TabStripPlacement" Value="Bottom" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderGroupPaneControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />
            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Grid.Column="0"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle"
              Visibility="Visible">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                Margin="{TemplateBinding Padding}"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <avalonDockControls:AnchorablePaneTabPanel
              x:Name="HeaderPanel"
              Grid.Row="0"
              Margin="4,0,0,4"
              Panel.ZIndex="1"
              IsItemsHost="true"
              KeyboardNavigation.TabIndex="1"
              Visibility="Visible" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <!--<Setter Property="ToolTip" Value="{Binding ToolTip}" />-->
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="Bd"
                    Padding="0,0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0"
                    CornerRadius="0,0,0,0">
                    <!--  Padding="{TemplateBinding Padding}"  -->

                    <ContentPresenter
                      x:Name="Content"
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <!--  Margin="2,2,2,2"  -->

                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor8}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                    <Setter Property="Margin" Value="0,-2,-1,0" />
                    <Setter TargetName="Content" Property="Margin" Value="0,1,0,0" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor14}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor6}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor13}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor9}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <!--<Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>-->
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableExpanderGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--#endregion-->

  <!--  ActivityPaneControlStyle  -->
  <Style x:Key="ActivityPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderGroupPaneControl}">
    <Setter Property="TabStripPlacement" Value="Left" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderGroupPaneControl}">
          <Grid
            ClipToBounds="False"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />
            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Grid.Column="0"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle"
              Visibility="Visible">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                Margin="{TemplateBinding Padding}"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <avalonDockControls:AnchorablePaneTabPanel
              x:Name="HeaderPanel"
              Grid.Row="0"
              Margin="4,0,0,4"
              Panel.ZIndex="1"
              IsItemsHost="true"
              KeyboardNavigation.TabIndex="1"
              Visibility="Visible" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor4}" />
          <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <!--<Setter Property="ToolTip" Value="{Binding ToolTip}" />-->
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="Bd"
                    Padding="0,0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0"
                    CornerRadius="0,0,0,0">
                    <!--  Padding="{TemplateBinding Padding}"  -->

                    <ContentPresenter
                      x:Name="Content"
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <!--  Margin="2,2,2,2"  -->

                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor8}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                    <Setter Property="Margin" Value="0,-2,-1,0" />
                    <Setter TargetName="Content" Property="Margin" Value="0,1,0,0" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor14}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor6}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor13}" />
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor9}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableTabItem Model="{Binding SelectedContent}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableExpanderGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#region   AnchorableExpanderExpanderControlStyle-->
  <!--<Style x:Key="AvalonDock_ThemeVS2010_AnchorableExpanderControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderControl}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ExpandDirection" Value="{Binding ExpandDirection, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderControl}">
          <DockPanel x:Name="RootVisual">
  -->
  <!--  Following border is required to catch mouse events  -->
  <!--<Border Grid.RowSpan="2" Background="Transparent" />-->
  <!--

            <AnchorablePaneTitle
              x:Name="HeaderSite"
              Height="24"
              Cursor="Hand"
              DockPanel.Dock="Top"
              Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
              Style="{DynamicResource AnchorablePaneTitleStyle}" />

            <Border
              x:Name="ExpandSiteBorder"
              Padding="{TemplateBinding Padding}"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              DockPanel.Dock="Bottom"
              Visibility="Visible">

              <LayoutAnchorableControl
                x:Name="ExpandSite"
                Focusable="false"
                Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource LayoutAnchorableStyle}" />
            </Border>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
              <Setter TargetName="ExpandSiteBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="RootVisual" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="90" />
                </Setter.Value>
              </Setter>
              <Setter Property="Padding" Value="0,0" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
              <Setter Property="Padding" Value="0,0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>


    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:AnchorablePaneTitle Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->
  <!--#endregion-->

  <!--#region   AnchorableExpanderExpanderControlStyle-->
  <!--<Style x:Key="AvalonDock_ThemeVS2010_AnchorableExpanderControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderControl}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ExpandDirection" Value="{Binding ExpandDirection, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderControl}">
          <DockPanel x:Name="RootVisual">

  -->
  <!--  Following border is required to catch mouse events  -->
  <!--
            <Border Grid.RowSpan="2" Background="Transparent" />

            <AnchorablePaneTitle
              x:Name="HeaderSite"
              Height="24"
              Cursor="Hand"
              DockPanel.Dock="Top"
              Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
              Style="{DynamicResource AnchorablePaneTitleStyle2}" />

            <Border
              x:Name="ExpandSiteBorder"
              Padding="{TemplateBinding Padding}"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              DockPanel.Dock="Bottom"
              Visibility="Visible">

              <LayoutAnchorableControl
                x:Name="ExpandSite"
                Focusable="false"
                Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource LayoutAnchorableStyle}" />
            </Border>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
              <Setter TargetName="ExpandSiteBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="RootVisual" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="90" />
                </Setter.Value>
              </Setter>
              <Setter Property="Padding" Value="0,0" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
              <Setter Property="Padding" Value="0,0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>


    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:AnchorablePaneTitle Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->
  <!--#endregion-->

  <!--#region   AnchorableExpanderExpanderControlStyle-->
  <!--
  <Style x:Key="AvalonDock_ThemeVS2010_AnchorableExpanderControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderControl}">
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
  -->
  <!--<Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />-->
  <!--
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="IsExpanded" Value="{Binding Model.IsExpanded, RelativeSource={RelativeSource Self}}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
  -->
  <!--<Setter Property="VerticalAlignment" Value="Top" />-->
  <!--
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="ExpandDirection" Value="{Binding ExpandDirection, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderControl}">
          <Border
            x:Name="Border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="0">
            <Grid Background="Transparent" x:Name="rootV">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
  -->
  <!--<Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>-->
  <!--

              <AnchorablePaneTitle
                x:Name="HeaderSite"
                Cursor="Hand"
								Grid.Column="0"
								Grid.Row="0"
								Grid.ColumnSpan="2"
                Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource AnchorablePaneTitleStyle2}" />

              <Border
                x:Name="ExpandSiteBorder"
                Grid.Row="1"
								Grid.Column="2"
                Background="Transparent"
                BorderBrush="{x:Null}"
                BorderThickness="0"
                Opacity="0">
  -->
  <!--  Visibility="Collapsed"  -->

  <!--<LayoutAnchorableControl
                  x:Name="ExpandSite"
                  Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  Style="{DynamicResource LayoutAnchorableStyle}" />-->
  <!--

                <ContentPresenter
                  Grid.Row="1"
                  Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                  FlowDirection="{TemplateBinding FlowDirection}" />

                <Border.LayoutTransform>
                  <ScaleTransform ScaleY="0" />
                </Border.LayoutTransform>
              </Border>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
  -->
  <!--<Setter TargetName="ExpandSiteBorder" Property="Visibility" Value="Visible" />-->
  <!--<Setter TargetName="ExpandSiteBorder" Property="BorderThickness" Value="0,1,0,0" />-->

  <!--<Setter TargetName="ExpandSiteBorder" Property="LayoutTransform" >
								<Setter.Value>
									<ScaleTransform ScaleY="1"/>
								</Setter.Value>
							</Setter>
							<Setter TargetName="ExpandSiteBorder" Property="Opacity"  Value="1.0"/>-->
  <!--

              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation
                      Storyboard.TargetName="ExpandSiteBorder"
                      Storyboard.TargetProperty="(Border.LayoutTransform).(ScaleTransform.ScaleY)"
                      From="0.0"
                      To="1.0"
                      Duration="00:00:00.167" />
                    <DoubleAnimation
                      Storyboard.TargetName="ExpandSiteBorder"
                      Storyboard.TargetProperty="(Border.Opacity)"
                      From="0.0"
                      To="1.0"
                      Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation
                      Storyboard.TargetName="ExpandSiteBorder"
                      Storyboard.TargetProperty="(Border.LayoutTransform).(ScaleTransform.ScaleY)"
                      From="1.0"
                      To="0"
                      Duration="00:00:00.167" />
                    <DoubleAnimation
                      Storyboard.TargetName="ExpandSiteBorder"
                      Storyboard.TargetProperty="(Border.Opacity)"
                      From="1.0"
                      To="0.0"
                      Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />

            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" Value="{DynamicResource ControlFillColorDisabledBrush}" />
              <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
  -->
  <!--<Setter TargetName="ExpandSite" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />-->
  <!--

              <Setter TargetName="HeaderSite" Property="Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
							<Setter TargetName="HeaderSite" Property="LayoutTransform">
								<Setter.Value>
									<RotateTransform Angle="90" />
								</Setter.Value>
							</Setter>
							<Setter Property="Padding" Value="0,0" />
            </Trigger>

          </ControlTemplate.Triggers>

        </ControlTemplate>
      </Setter.Value>
    </Setter>


    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:AnchorablePaneTitle Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  -->
  <!--#endregion-->



  <!--#region   AnchorableExpanderExpanderControlStyle-->
  <Style x:Key="AvalonDock_ThemeVS2010_AnchorableExpanderControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderControl}">
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <!--<Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />-->
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="IsExpanded" Value="{Binding Model.IsExpanded, RelativeSource={RelativeSource Self}}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <!--<Setter Property="VerticalAlignment" Value="Top" />-->
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="ExpandDirection" Value="{Binding ExpandDirection, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableExpanderControl}">
          <Border
            x:Name="Border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="0">
            <DockPanel LastChildFill="True">

              <AnchorablePaneTitle
                x:Name="HeaderSite"
                Cursor="Hand"
                DockPanel.Dock="Top"
                Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource AnchorablePaneTitleStyle2}" />

              <Border
                x:Name="ExpandSiteBorder"
                Background="Transparent"
                BorderBrush="{x:Null}"
                BorderThickness="0"
                DockPanel.Dock="Bottom"
                Opacity="0">
                <!--  Visibility="Collapsed"  -->

                <!--<LayoutAnchorableControl
                  x:Name="ExpandSite"
                  Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  Style="{DynamicResource LayoutAnchorableStyle}" />-->

                <ContentPresenter
                  Grid.Row="1"
                  Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                  FlowDirection="{TemplateBinding FlowDirection}" />

                <Border.LayoutTransform>
                  <ScaleTransform ScaleY="0" />
                </Border.LayoutTransform>
              </Border>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <!--<Setter TargetName="ExpandSiteBorder" Property="Visibility" Value="Visible" />-->
              <!--<Setter TargetName="ExpandSiteBorder" Property="BorderThickness" Value="0,1,0,0" />-->

              <!--<Setter TargetName="ExpandSiteBorder" Property="LayoutTransform" >
								<Setter.Value>
									<ScaleTransform ScaleY="1"/>
								</Setter.Value>
							</Setter>
							<Setter TargetName="ExpandSiteBorder" Property="Opacity"  Value="1.0"/>-->

              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation
                      Storyboard.TargetName="ExpandSiteBorder"
                      Storyboard.TargetProperty="(Border.LayoutTransform).(ScaleTransform.ScaleY)"
                      From="0.0"
                      To="1.0"
                      Duration="00:00:00.167" />
                    <DoubleAnimation
                      Storyboard.TargetName="ExpandSiteBorder"
                      Storyboard.TargetProperty="(Border.Opacity)"
                      From="0.0"
                      To="1.0"
                      Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation
                      Storyboard.TargetName="ExpandSiteBorder"
                      Storyboard.TargetProperty="(Border.LayoutTransform).(ScaleTransform.ScaleY)"
                      From="1.0"
                      To="0"
                      Duration="00:00:00.167" />
                    <DoubleAnimation
                      Storyboard.TargetName="ExpandSiteBorder"
                      Storyboard.TargetProperty="(Border.Opacity)"
                      From="1.0"
                      To="0.0"
                      Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>

            <!--<MultiTrigger>
							<MultiTrigger.Conditions >
								<Condition Property="IsExpanded" Value="True"/>
								<Condition Property="ExpandDirection" Value="Right"/>
							</MultiTrigger.Conditions>
							<Setter
						</MultiTrigger>-->

            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />

            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" Value="{DynamicResource ControlFillColorDisabledBrush}" />
              <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
              <!--<Setter TargetName="ExpandSite" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />-->

              <Setter TargetName="HeaderSite" Property="Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="90" />
                </Setter.Value>
              </Setter>
              <Setter Property="Padding" Value="0,0" />
              <Setter Property="VerticalContentAlignment" Value="Stretch" />
              <Setter Property="VerticalAlignment" Value="Stretch" />
            </Trigger>

          </ControlTemplate.Triggers>

        </ControlTemplate>
      </Setter.Value>
    </Setter>


    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:AnchorablePaneTitle Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <Duration x:Key="ExpandDuration">0:0:0.250</Duration>
  <Duration x:Key="CollapseDuration">0:0:0.200</Duration>

  <KeyTime x:Key="ExpandKeyTime">0:0:0.250</KeyTime>
  <KeyTime x:Key="CollapseKeyTime">0:0:0.200</KeyTime>

  <Style x:Key="MaterialDesignExpanderToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent">
            <Path
              x:Name="ExpandPath"
              Width="24"
              Height="24"
              Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"
              Fill="Blue"
              Opacity="0.38"
              RenderTransformOrigin="0.5 0.5">
              <!--<Path.RenderTransform>
                                <RotateTransform>
                                    <RotateTransform.Angle>
                                        -90
                                    </RotateTransform.Angle>
                                </RotateTransform>
                            </Path.RenderTransform>-->
            </Path>


            <!--<VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource ExpandKeyTime}" Value="180" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource CollapseKeyTime}" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>-->
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="ExpandPath" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="0" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
              <Setter TargetName="ExpandPath" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MaterialDesignHorizontalHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent" />

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="{TemplateBinding Background}">


            <ContentPresenter
              Grid.Column="2"
              VerticalAlignment="Center"
              Content="{TemplateBinding Content}"
              ContentStringFormat="{TemplateBinding ContentStringFormat}"
              ContentTemplate="{TemplateBinding ContentTemplate}"
              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MaterialDesignVerticalHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent" />

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="{TemplateBinding Background}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="16" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>

              <ToggleButton
                x:Name="ExpanderButton"
                Grid.Row="0"
                VerticalAlignment="Center"
                Foreground="{TemplateBinding Foreground}"
                IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                RenderTransformOrigin="0.5 0.5">
                <ToggleButton.Style>
                  <Style BasedOn="{StaticResource MaterialDesignExpanderToggleButton}" TargetType="{x:Type ToggleButton}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Left">
                        <Setter Property="RenderTransform">
                          <Setter.Value>
                            <RotateTransform Angle="90" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>

                      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Right">
                        <Setter Property="RenderTransform">
                          <Setter.Value>
                            <RotateTransform Angle="-90" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>

                    </Style.Triggers>
                  </Style>
                </ToggleButton.Style>
              </ToggleButton>

              <ContentPresenter
                Grid.Row="2"
                VerticalAlignment="Center"
                Content="{TemplateBinding Content}"
                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="avalonDockControls:AnchorablePaneTitle">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border
            Padding="0,2,0,1"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="2,2,0,0">

            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter
                  x:Name="Header"
                  Margin="2,0,0,0"
                  Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                  TextElement.Foreground="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
              </avalonDockControls:DropDownControlArea>


              <avalonDockControls:DropDownButton
                x:Name="MenuDropDownButton"
                Grid.Column="1"
                VerticalAlignment="Center"
                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ToolButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                <Image x:Name="PART_ImgMenuPin" Source="Images/PinMenu.png" />
              </avalonDockControls:DropDownButton>

              <Button
                x:Name="PART_AutoHidePin"
                Grid.Column="2"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                <Image x:Name="PART_ImgAutoHidePin" Source="Images/PinAutoHide.png" />
              </Button>
              <Button
                x:Name="PART_HidePin"
                Grid.Column="3"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                <Image x:Name="PART_ImgHidePin" Source="Images/PinClose.png" />
              </Button>
              <Button
                x:Name="PART_Collapse"
                Grid.Column="4"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Command="{Binding Path=LayoutItem.ExpandCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                <Image Source="Images/PinClose.png" />
              </Button>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}" Value="True">
              <Setter TargetName="PART_AutoHidePin" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="90" />
                </Setter.Value>
              </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
              <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor15}" />
              <Setter TargetName="Header" Property="TextElement.Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
              <Setter TargetName="PART_ImgAutoHidePin" Property="Source" Value="Images/PinAutoHide_Dark.png" />
              <Setter TargetName="PART_ImgHidePin" Property="Source" Value="Images/PinClose_Dark.png" />
              <Setter TargetName="PART_ImgMenuPin" Property="Source" Value="Images/PinMenu_Dark.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Model.CanClose, RelativeSource={RelativeSource Mode=Self}}" Value="True">
              <Setter TargetName="PART_HidePin" Property="Command" Value="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="PART_HidePin" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Document_Close}" />

            </DataTrigger>
            <Trigger SourceName="MenuDropDownButton" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgMenuPin" Property="Source" Value="Images/PinMenu_Black.png" />
            </Trigger>
            <Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
              <Setter TargetName="PART_ImgMenuPin" Property="Source" Value="Images/PinMenu_Black.png" />
            </Trigger>
            <Trigger SourceName="PART_AutoHidePin" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgAutoHidePin" Property="Source" Value="Images/PinAutoHide_Black.png" />
            </Trigger>
            <Trigger SourceName="PART_HidePin" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgHidePin" Property="Source" Value="Images/PinClose_Black.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="AnchorablePaneTitleStyle" TargetType="avalonDockControls:AnchorablePaneTitle">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border
            Padding="0,0,0,0"
            Background="Red"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="0"
            CornerRadius="0,0,0,0">
            <!--  Background="{TemplateBinding Background}"  -->

            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>

              <ToggleButton
                Grid.Column="0"
                VerticalAlignment="Center"
                Foreground="{TemplateBinding Foreground}"
                IsChecked="{Binding Path=Model.IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                RenderTransformOrigin="0.5 0.5"
                Style="{DynamicResource MaterialDesignExpanderToggleButton}" />
              <!--  Command="{Binding Path=LayoutItem.ExpandCommand, RelativeSource={RelativeSource TemplatedParent}}"  -->


              <avalonDockControls:DropDownControlArea
                Grid.Column="2"
                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter
                  x:Name="Header"
                  Margin="2,0,0,0"
                  Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                  TextElement.Foreground="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
              </avalonDockControls:DropDownControlArea>


              <!--<avalonDockControls:DropDownButton
                                x:Name="MenuDropDownButton"
                                Grid.Column="3"
                                VerticalAlignment="Center"
                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                Focusable="False"
                                Style="{StaticResource AvalonDock_ThemeVS2010_ToolButtonStyle}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                                <Image x:Name="PART_ImgMenuPin" Source="Images/PinMenu.png" />
                            </avalonDockControls:DropDownButton>

                            <Button
                                x:Name="PART_AutoHidePin"
                                Grid.Column="4"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Focusable="False"
                                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}"
                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                <Image x:Name="PART_ImgAutoHidePin" Source="Images/PinAutoHide.png" />
                            </Button>
                            <Button
                                x:Name="PART_HidePin"
                                Grid.Column="5"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Focusable="False"
                                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                <Image x:Name="PART_ImgHidePin" Source="Images/PinClose.png" />
                            </Button>-->
              <Button
                x:Name="PART_Collapse"
                Grid.Column="6"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Command="{Binding Path=LayoutItem.ExpandCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                <Image Source="Images/PinClose.png" />
              </Button>

            </Grid>
          </Border>
          <!--<ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter TargetName="PART_AutoHidePin" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor15}" />
                            <Setter TargetName="Header" Property="TextElement.Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter TargetName="PART_ImgAutoHidePin" Property="Source" Value="Images/PinAutoHide_Dark.png" />
                            <Setter TargetName="PART_ImgHidePin" Property="Source" Value="Images/PinClose_Dark.png" />
                            <Setter TargetName="PART_ImgMenuPin" Property="Source" Value="Images/PinMenu_Dark.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Model.CanClose, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter TargetName="PART_HidePin" Property="Command" Value="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="PART_HidePin" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Document_Close}" />

                        </DataTrigger>
                        <Trigger SourceName="MenuDropDownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgMenuPin" Property="Source" Value="Images/PinMenu_Black.png" />
                        </Trigger>
                        <Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
                            <Setter TargetName="PART_ImgMenuPin" Property="Source" Value="Images/PinMenu_Black.png" />
                        </Trigger>
                        <Trigger SourceName="PART_AutoHidePin" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgAutoHidePin" Property="Source" Value="Images/PinAutoHide_Black.png" />
                        </Trigger>
                        <Trigger SourceName="PART_HidePin" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgHidePin" Property="Source" Value="Images/PinClose_Black.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>-->
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="DefaultExpanderToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Grid Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <ContentPresenter
        x:Name="ContentPresenter"
        Grid.Column="1"
        Margin="8,0,0,0"
        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
        Content="{TemplateBinding Content}" />
      <Grid
        x:Name="ChevronGrid"
        Grid.Column="0"
        Margin="6,0,0,0"
        VerticalAlignment="Center"
        Background="Transparent"
        RenderTransformOrigin="0.5, 0.5">
        <Grid.RenderTransform>
          <RotateTransform Angle="-90" />
        </Grid.RenderTransform>
        <!--<controls:SymbolIcon
         x:Name="ControlChevronIcon"
         FontSize="{StaticResource ExpanderChevronSize}"
         Foreground="{TemplateBinding Foreground}"
         Symbol="ChevronDown24" />-->

        <Path
          x:Name="ControlChevronIcon"
          Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"
          Fill="{TemplateBinding Foreground}"
          Stretch="Uniform" />

      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation
                Storyboard.TargetName="ChevronGrid"
                Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)"
                To="0"
                Duration="00:00:00.050" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation
                Storyboard.TargetName="ChevronGrid"
                Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)"
                To="-90"
                Duration="00:00:00.050" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <!--<DataTrigger Binding="{Binding Path=ExpandDirection, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutAnchorableExpanderControl}}}" Value="Left">
        <Setter TargetName="PART_ToolBar" Property="Visibility" Value="Visible" />
      </DataTrigger>-->
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="AnchorablePaneTitleStyle2" TargetType="{x:Type avalonDockControls:AnchorablePaneTitle}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:AnchorablePaneTitle}">
          <Border>
            <ToggleButton
              x:Name="PART_Root"
              Height="24"
              Margin="0"
              Padding="0"
              HorizontalContentAlignment="Stretch"
              VerticalContentAlignment="Center"
              Background="WhiteSmoke"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              IsChecked="{Binding Path=Model.IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
              Template="{StaticResource DefaultExpanderToggleButtonStyle}">
              <DockPanel FlowDirection="LeftToRight" LastChildFill="False">
                <TextBlock
                  VerticalAlignment="Center"
                  DockPanel.Dock="Left"
                  Foreground="{TemplateBinding Foreground}"
                  Text="{Binding Path=Model.Title, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />

                <!--  ItemsSource="{Binding Path=Model.ToolBars, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"  -->
                <ToolBar
                  x:Name="PART_ToolBar"
                  Background="Transparent"
                  DockPanel.Dock="Right"
                  Style="{DynamicResource SimpleToolBar}"
                  Visibility="Collapsed">
                  <!--  Visibility="{Binding Visibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type avalonDockControls:LayoutAnchorableExpanderControl}}}"  -->
                  <!--  DataContext="{Binding Path=., RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutAnchorableExpanderControl}}}"  -->
                  <ToggleButton
                    Width="24"
                    Height="24"
                    Content="1" />
                  <ToggleButton
                    Width="24"
                    Height="24"
                    Content="2" />
                  <ToggleButton
                    Width="24"
                    Height="24"
                    Content="3"
                    ToolBar.OverflowMode="Always" />
                </ToolBar>

              </DockPanel>
            </ToggleButton>
          </Border>
          <ControlTemplate.Triggers>
            <!--<Trigger Property="IsMouseOver"  Value="True">
							<Setter Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
							-->
            <!--  Visibility=“{Binding IsSelected, Converter={StaticResource ItemsPanelStyleCvt}, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}”  -->
            <!--<Setter Property="{Binding Visibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type avalonDockControls:LayoutAnchorableExpanderControl}}}" Value="Visible"/>-->
            <!--
						</Trigger>-->
            <!--<Trigger Binding="{Binding}">-->
            <!--<DataTrigger Binding="{Binding ElementName=Border, Path=IsMouseOver,FallbackValue=TestFallbackValue}">
							<Setter TargetName="PART_ToolBar" Property="Visibility" Value="Visible"/>
						</DataTrigger>-->
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutAnchorableExpanderControl}}}" Value="True">
              <Setter TargetName="PART_ToolBar" Property="Visibility" Value="Visible" />
            </DataTrigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  侧停靠栏整体  -->
  <ControlTemplate x:Key="AvalonDock_ThemeVS2010_ActivityBarTemplate" TargetType="{x:Type avalonDockControls:LayoutActivityBarControl}">
    <Grid ClipToBounds="true" SnapsToDevicePixels="true">
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <!--  Following border is required to catch mouse events  -->
      <Border Grid.RowSpan="2" Background="Transparent" />

      <ItemsControl
        Grid.Row="0"
        Background="BlanchedAlmond"
        ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
        <ItemsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <StackPanel MinWidth="0" MinHeight="0" />
            <!--  Orientation="{Binding Path=Model.Side, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorSideControl}, Mode=FindAncestor}, Converter={avalonDockConverters:AnchorSideToOrientationConverter}}"  -->
          </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
      </ItemsControl>

      <Grid Grid.Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <TextBlock
          Grid.Column="0"
          Margin="8,4,4,0"
          Text="测试标题" />
      </Grid>


      <ItemsControl />
    </Grid>
  </ControlTemplate>

  <!--  侧停靠栏整体  -->
  <!--<ControlTemplate x:Key="AvalonDock_ThemeVS2010_AnchorSideTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorSideControl}">

    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>

      <ItemsControl
        Grid.Row="0"
        Background="Blue"
        ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
        <ItemsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <StackPanel Background="Green" Orientation="Vertical" />
          </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
        <ItemsControl.Style>
          <Style TargetType="{x:Type ItemsControl}">
            <Style.Resources>
              <RotateTransform x:Key="LeftRightAnchorSideRotateTransform" Angle="0" />
            </Style.Resources>
            <Style.Triggers>
              <DataTrigger Binding="{Binding Path=Model.Parent.Side, RelativeSource={RelativeSource TemplatedParent}}" Value="Left">
                <Setter Property="LayoutTransform" Value="{StaticResource LeftRightAnchorSideRotateTransform}" />
              </DataTrigger>
              <DataTrigger Binding="{Binding Path=Model.Parent.Side, RelativeSource={RelativeSource TemplatedParent}}" Value="Right">
                <Setter Property="LayoutTransform" Value="{StaticResource LeftRightAnchorSideRotateTransform}" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ItemsControl.Style>
      </ItemsControl>

      <StackPanel Grid.Row="1">
        <Image
          HorizontalAlignment="Left"
          VerticalAlignment="Center"
          Source="Images/DockAnchorableLeft.PNG"
          Stretch="None" />
        <Image
          HorizontalAlignment="Left"
          VerticalAlignment="Center"
          Source="Images/DockAnchorableRight.PNG"
          Stretch="None" />
        <Image
          HorizontalAlignment="Left"
          VerticalAlignment="Center"
          Source="Images/DockAnchorableTop.PNG"
          Stretch="None" />
      </StackPanel>
    </Grid>
  </ControlTemplate>-->

  <!--  侧停靠栏内Button组  -->
  <!--<ControlTemplate x:Key="AvalonDock_ThemeVS2010_AnchorGroupTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorGroupControl}">

    <Grid Background="Red">
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>

      <ItemsControl
        Grid.Row="0"
        Background="Blue"
        ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
        <ItemsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <StackPanel Background="Green" Orientation="Vertical" />
          </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
        <ItemsControl.Style>
          <Style TargetType="{x:Type ItemsControl}">
            <Style.Resources>
              <RotateTransform x:Key="LeftRightAnchorSideRotateTransform" Angle="0" />
            </Style.Resources>
            <Style.Triggers>
              <DataTrigger Binding="{Binding Path=Model.Parent.Side, RelativeSource={RelativeSource TemplatedParent}}" Value="Left">
                <Setter Property="LayoutTransform" Value="{StaticResource LeftRightAnchorSideRotateTransform}" />
              </DataTrigger>
              <DataTrigger Binding="{Binding Path=Model.Parent.Side, RelativeSource={RelativeSource TemplatedParent}}" Value="Right">
                <Setter Property="LayoutTransform" Value="{StaticResource LeftRightAnchorSideRotateTransform}" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ItemsControl.Style>
      </ItemsControl>

  -->
  <!--<StackPanel Grid.Row="1" >
				<Image
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Source="Images/DockAnchorableLeft.PNG"
                    Stretch="None" />
				<Image
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Source="Images/DockAnchorableRight.PNG"
                    Stretch="None" />
				<Image
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Source="Images/DockAnchorableTop.PNG"
                    Stretch="None" />
			</StackPanel>-->
  <!--
    </Grid>
  </ControlTemplate>-->
  <!--  Background="{DynamicResource AvalonDock_ThemeVS2010_BaseColor16}"  -->

  <!--<ControlTemplate x:Key="AvalonDock_ThemeVS2010_AnchorTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorControl}">
    <Border
      x:Name="Bd"
      Margin="0,4,0,0"
      Padding="2"
      Background="{DynamicResource AvalonDock_ThemeVS2010_BaseColor16}"
      BorderThickness="1"
      CornerRadius="3,3,0,0">
      <ContentPresenter
        Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
        ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
        ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
        TextElement.Foreground="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}" />
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Side" Value="Right">
        <Setter TargetName="Bd" Property="CornerRadius" Value="0,0,3,3" />
        <Setter TargetName="Bd" Property="Margin" Value="0,0,0,2" />
      </Trigger>
      <Trigger Property="Side" Value="Bottom">
        <Setter TargetName="Bd" Property="CornerRadius" Value="3,3,0,0" />
        <Setter TargetName="Bd" Property="Margin" Value="0,2,0,0" />
      </Trigger>
      <Trigger Property="Side" Value="Top">
        <Setter TargetName="Bd" Property="CornerRadius" Value="0,0,3,3" />
        <Setter TargetName="Bd" Property="Margin" Value="0,0,0,2" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="true" />
          <Condition Property="Selector.IsSelected" Value="false" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor14}" />
        <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor6}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>-->

  <Style x:Key="{x:Type avalonDockControls:OverlayWindow}" TargetType="{x:Type avalonDockControls:OverlayWindow}">
    <Setter Property="Background" Value="GreenYellow" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:OverlayWindow}">
          <Canvas x:Name="PART_DropTargetsContainer" Opacity="0.9">
            <Path
              x:Name="PART_PreviewBox"
              Fill="Blue"
              StrokeThickness="0" />
            <!--  Stroke="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"  -->

            <Path
              x:Name="PART_InsertLine"
              Fill="WhiteSmoke"
              StrokeThickness="0" />

            <Grid x:Name="PART_DockingManagerDropTargets">
              <Image
                x:Name="PART_DockingManagerDropTargetLeft"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Source="Images/DockAnchorableLeft.PNG"
                Stretch="None" />
              <Image
                x:Name="PART_DockingManagerDropTargetRight"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Source="Images/DockAnchorableRight.PNG"
                Stretch="None" />
              <Image
                x:Name="PART_DockingManagerDropTargetBottom"
                HorizontalAlignment="Center"
                VerticalAlignment="Bottom"
                Source="Images/DockAnchorableBottom.PNG"
                Stretch="None" />
              <Image
                x:Name="PART_DockingManagerDropTargetTop"
                HorizontalAlignment="Center"
                VerticalAlignment="Top"
                Source="Images/DockAnchorableTop.PNG"
                Stretch="None" />
            </Grid>
            <Grid x:Name="PART_AnchorablePaneDropTargets" Background="Green">
              <Grid
                Width="112"
                Height="112"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <Image
                  Grid.RowSpan="3"
                  Grid.ColumnSpan="3"
                  Margin="0,0.5,0,-0.5"
                  Source="Images/DockPaneEmpty.png"
                  Stretch="None" />
                <Border
                  Name="PART_AnchorablePaneDropTargetTop"
                  Grid.Row="0"
                  Grid.Column="1"
                  Margin="0,3.5,0,0">
                  <Image Source="Images/DockDocumentAsAnchorableTop.png" Stretch="None" />
                </Border>
                <Border
                  Name="PART_AnchorablePaneDropTargetRight"
                  Grid.Row="1"
                  Grid.Column="2"
                  Margin="2">
                  <Image Source="Images/DockDocumentAsAnchorableRight.png" Stretch="None" />
                </Border>
                <Border
                  Name="PART_AnchorablePaneDropTargetBottom"
                  Grid.Row="2"
                  Grid.Column="1"
                  Margin="0,-0.5,0,0">
                  <Image Source="Images/DockDocumentAsAnchorableBottom.png" Stretch="None" />
                </Border>
                <Border
                  Name="PART_AnchorablePaneDropTargetLeft"
                  Grid.Row="1"
                  Grid.Column="0"
                  Margin="2">
                  <Image Source="Images/DockDocumentAsAnchorableLeft.png" Stretch="None" />
                </Border>
                <Border
                  Name="PART_AnchorablePaneDropTargetInto"
                  Grid.Row="1"
                  Grid.Column="1"
                  Margin="0,0.5,0,0">
                  <Image Source="Images/DockDocumentInside.png" Stretch="None" />
                </Border>
              </Grid>
            </Grid>

            <Grid x:Name="PART_AnchorableExpanderPaneDropTargets">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="1*" />
                  <RowDefinition Height="1*" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="1*" />
                  <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <!--<Image
                                    Grid.RowSpan="3"
                                    Grid.ColumnSpan="3"
                                    Margin="0,0.5,0,-0.5"
                                    Source="Images/DockPaneEmpty.png"
                                    Stretch="None"
                                    Visibility="Collapsed" />-->
                <Border
                  Name="PART_AnchorableExpanderPaneDropTargetTop"
                  Grid.Row="0"
                  Grid.ColumnSpan="2"
                  Margin="0"
                  VerticalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableTop.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorableExpanderPaneDropTargetBottom"
                  Grid.Row="1"
                  Grid.ColumnSpan="2"
                  Margin="0"
                  VerticalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableBottom.png" Stretch="None" />-->
                </Border>

                <Border
                  Name="PART_AnchorableExpanderPaneDropTargetLeft"
                  Grid.RowSpan="2"
                  Grid.Column="0"
                  Margin="0"
                  VerticalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableTop.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorableExpanderPaneDropTargetRight"
                  Grid.RowSpan="2"
                  Grid.Column="1"
                  Margin="0"
                  VerticalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableBottom.png" Stretch="None" />-->
                </Border>

              </Grid>
            </Grid>
            <Grid x:Name="PART_AnchorableActivityBarDropTargets">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="1*" />
                  <RowDefinition Height="1*" />
                </Grid.RowDefinitions>
                <!--<Image
                                    Grid.RowSpan="3"
                                    Grid.ColumnSpan="3"
                                    Margin="0,0.5,0,-0.5"
                                    Source="Images/DockPaneEmpty.png"
                                    Stretch="None"
                                    Visibility="Collapsed" />-->
                <Border
                  Name="PART_AnchorableActivityBarDropTargetTop"
                  Grid.Row="0"
                  Margin="0"
                  VerticalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableTop.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorableActivityBarDropTargetBottom"
                  Grid.Row="1"
                  Margin="0"
                  VerticalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableBottom.png" Stretch="None" />-->
                </Border>

              </Grid>
            </Grid>
            <Grid x:Name="PART_AnchorableItemDropTargets">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="1*" />
                  <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>

                <!--<Image
                                    Grid.RowSpan="3"
                                    Grid.ColumnSpan="3"
                                    Margin="0,0.5,0,-0.5"
                                    Source="Images/DockPaneEmpty.png"
                                    Stretch="None" />-->
                <Border
                  Name="PART_AnchorableItemDropTargetLeft"
                  Grid.Column="0"
                  Margin="0"
                  HorizontalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableTop.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorableItemDropTargetRight"
                  Grid.Column="1"
                  Margin="0"
                  HorizontalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableRight.png" Stretch="None" />-->
                </Border>

              </Grid>
            </Grid>

            <Grid x:Name="PART_DocumentPaneDropTargets">
              <Grid
                Width="112"
                Height="112"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <Image
                  Grid.RowSpan="3"
                  Grid.ColumnSpan="3"
                  Source="Images/DockPaneEmpty.PNG"
                  Stretch="None" />
                <Border
                  Name="PART_DocumentPaneDropTargetTop"
                  Grid.Row="0"
                  Grid.Column="1"
                  Margin="2">
                  <Image Source="Images/DockDocumentTop.png" Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneDropTargetRight"
                  Grid.Row="1"
                  Grid.Column="2"
                  Margin="2">
                  <Image Source="Images/DockDocumentRight.png" Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneDropTargetBottom"
                  Grid.Row="2"
                  Grid.Column="1"
                  Margin="2">
                  <Image Source="Images/DockDocumentBottom.png" Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneDropTargetLeft"
                  Grid.Row="1"
                  Grid.Column="0"
                  Margin="2">
                  <Image Source="Images/DockDocumentLeft.png" Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneDropTargetInto"
                  Grid.Row="1"
                  Grid.Column="1">
                  <Image Source="Images/DockDocumentInside.png" Stretch="None" />
                </Border>
              </Grid>
            </Grid>

            <Grid x:Name="PART_DocumentPaneFullDropTargets">
              <Grid
                Width="184"
                Height="184"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition />
                  <RowDefinition />
                  <RowDefinition />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <Image
                  Grid.RowSpan="5"
                  Grid.ColumnSpan="5"
                  Source="Images/DockPaneLargeEmpty.PNG"
                  Stretch="None"
                  Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:OverlayWindowToVisibilityConverter}, ConverterParameter=True}" />
                <Image
                  Grid.RowSpan="5"
                  Grid.ColumnSpan="5"
                  Source="Images/DockPaneEmpty.PNG"
                  Stretch="None"
                  Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:OverlayWindowToVisibilityConverter}, ConverterParameter=False}" />
                <Border
                  Name="PART_DocumentPaneFullDropTargetTop"
                  Grid.Row="1"
                  Grid.Column="2">
                  <Image
                    Margin="2"
                    Source="Images/DockDocumentTop.png"
                    Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneFullDropTargetRight"
                  Grid.Row="2"
                  Grid.Column="3">
                  <Image
                    Margin="2"
                    Source="Images/DockDocumentRight.png"
                    Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneFullDropTargetBottom"
                  Grid.Row="3"
                  Grid.Column="2">
                  <Image
                    Margin="2"
                    Source="Images/DockDocumentBottom.png"
                    Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneFullDropTargetLeft"
                  Grid.Row="2"
                  Grid.Column="1">
                  <Image
                    Margin="2"
                    Source="Images/DockDocumentLeft.png"
                    Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneFullDropTargetInto"
                  Grid.Row="2"
                  Grid.Column="2">
                  <Image Source="Images/DockDocumentInside.png" Stretch="None" />
                </Border>

                <Border
                  Name="PART_DocumentPaneDropTargetTopAsAnchorablePane"
                  Grid.Row="0"
                  Grid.Column="2">
                  <Image
                    Margin="2"
                    Source="Images/DockDocumentAsAnchorableTop.png"
                    Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneDropTargetRightAsAnchorablePane"
                  Grid.Row="2"
                  Grid.Column="4">
                  <Image
                    Margin="2"
                    Source="Images/DockDocumentAsAnchorableRight.png"
                    Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneDropTargetBottomAsAnchorablePane"
                  Grid.Row="4"
                  Grid.Column="2">
                  <Image
                    Margin="2"
                    Source="Images/DockDocumentAsAnchorableBottom.png"
                    Stretch="None" />
                </Border>
                <Border
                  Name="PART_DocumentPaneDropTargetLeftAsAnchorablePane"
                  Grid.Row="2"
                  Grid.Column="0">
                  <Image
                    Margin="2"
                    Source="Images/DockDocumentAsAnchorableLeft.png"
                    Stretch="None" />
                </Border>

              </Grid>
            </Grid>

            <!--<Grid x:Name="PART_AnchorableGroupPaneDropTargets">
                            <Grid
                                Width="112"
                                Height="112"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center">

                                <Image
                                    x:Name="PART_AnchorablePaneGroupDropTargetBottom"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Bottom"
                                    Source="Images/DockAnchorableBottom.PNG"
                                    Stretch="None" />
                                <Image
                                    x:Name="PART_AnchorablePaneGroupDropTargetTop"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Top"
                                    Source="Images/DockAnchorableTop.PNG"
                                    Stretch="None" />

                            </Grid>-->

            <Grid x:Name="PART_AnchorableGroupPaneDropTargets">
              <Image
                x:Name="PART_AnchorablePaneGroupDropTargetBottom"
                HorizontalAlignment="Center"
                VerticalAlignment="Bottom"
                Source="Images/DockAnchorableBottom.PNG"
                Stretch="None" />
              <Image
                x:Name="PART_AnchorablePaneGroupDropTargetTop"
                HorizontalAlignment="Center"
                VerticalAlignment="Top"
                Source="Images/DockAnchorableTop.PNG"
                Stretch="None" />
            </Grid>

          </Canvas>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate x:Key="AvalonDock_ThemeVS2010_DocumentHeaderTemplate">
    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
  </DataTemplate>

  <!--  Anchorable Tab 内的标题样式  -->
  <DataTemplate x:Key="AvalonDock_ThemeVS2010_AnchorableHeaderTemplate">
    <Grid>
      <Grid Margin="4,2">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <!--<Image
          x:Name="icon"
          Source="{Binding IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}"
          Stretch="Uniform" />-->
        <TextBlock
          x:Name="title"
          Grid.Column="1"
          Margin="4,0,0,0"
          Text="{Binding Title}"
          TextTrimming="CharacterEllipsis" />
      </Grid>
    </Grid>
    <!--<DataTemplate.Triggers>
      <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
        <Setter TargetName="title" Property="Margin" Value="0" />
      </DataTrigger>
    </DataTemplate.Triggers>-->
  </DataTemplate>

  <!--  Activity Tab 内的Items样式  -->
  <DataTemplate x:Key="AvalonDock_ThemeVS2010_ActiviyItemTemplate">
    <Grid>
      <Grid Margin="4,2">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <!--<Image
          x:Name="icon"
          Source="{Binding IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}"
          Stretch="Uniform" />-->
        <TextBlock
          x:Name="title"
          Grid.Column="1"
          Margin="4,0,0,0"
          Text="{Binding Title}"
          TextTrimming="CharacterEllipsis" />
      </Grid>
    </Grid>
    <!--<DataTemplate.Triggers>
      <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
        <Setter TargetName="title" Property="Margin" Value="0" />
      </DataTrigger>
    </DataTemplate.Triggers>-->
  </DataTemplate>

  <DataTemplate x:Key="AvalonDock_ThemeVS2010_DocumentTitleTemplate">
    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
  </DataTemplate>

  <!--  Anchorable 顶部的标题样式  -->
  <DataTemplate x:Key="AvalonDock_ThemeVS2010_AnchorableTitleTemplate">
    <TextBlock
      VerticalAlignment="Center"
      Background="Transparent"
      Text="{Binding Title}"
      TextTrimming="CharacterEllipsis" />
  </DataTemplate>

  <DataTemplate x:Key="AvalonDock_ThemeVS2010_IconContentTemplate">
    <Image Source="{Binding IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="Uniform" />
  </DataTemplate>

  <!--  下拉菜单  -->
  <ContextMenu x:Key="AvalonDock_ThemeVS2010_AnchorableContextMenu">
    <MenuItem Command="{Binding Path=FloatCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Float}" />
    <MenuItem Command="{Binding Path=DockCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Dock}" />
    <MenuItem Command="{Binding Path=DockAsDocumentCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_DockAsDocument}" />
    <MenuItem Command="{Binding Path=AutoHideCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_AutoHide}" />
    <MenuItem
      Command="{Binding Path=CloseCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_Close}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
    <MenuItem Command="{Binding Path=HideCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Hide}">
      <MenuItem.Visibility>
        <MultiBinding Converter="{avalonDockConverters:AnchorableContextMenuHideVisibilityConverter}">
          <Binding
            Converter="{avalonDockConverters:BoolToVisibilityConverter}"
            Mode="OneWay"
            Path="IsEnabled"
            RelativeSource="{RelativeSource Self}" />
          <Binding Path="CanClose" />
        </MultiBinding>
      </MenuItem.Visibility>
    </MenuItem>
  </ContextMenu>

  <ContextMenu x:Key="AvalonDock_ThemeVS2010_DocumentContextMenu">
    <MenuItem
      Command="{Binding Path=CloseCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_Close}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
    <MenuItem Command="{Binding Path=CloseAllButThisCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAllButThis}" />
    <MenuItem Command="{Binding Path=CloseAllCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAll}" />
    <MenuItem Command="{Binding Path=FloatCommand}" Header="{x:Static avalonDockProperties:Resources.Document_Float}" />
    <MenuItem Command="{Binding Path=DockAsDocumentCommand}" Header="{x:Static avalonDockProperties:Resources.Document_DockAsDocument}" />
    <MenuItem
      Command="{Binding Path=NewHorizontalTabGroupCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_NewHorizontalTabGroup}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
      <MenuItem.Icon>
        <Image
          Width="14"
          Source="Images/HTabGroup.png"
          Stretch="Uniform" />
      </MenuItem.Icon>
    </MenuItem>

    <MenuItem
      Command="{Binding Path=NewVerticalTabGroupCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_NewVerticalTabGroup}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
      <MenuItem.Icon>
        <Image
          Width="14"
          Source="Images/VTabGroup.png"
          Stretch="Uniform" />
      </MenuItem.Icon>
    </MenuItem>
    <MenuItem
      Command="{Binding Path=MoveToNextTabGroupCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_MoveToNextTabGroup}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
    <MenuItem
      Command="{Binding Path=MoveToPreviousTabGroupCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_MoveToPreviousTabGroup}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
  </ContextMenu>

  <!--  DockingManager  -->
  <Style x:Key="{x:Type avalonDock:DockingManager}" TargetType="{x:Type avalonDock:DockingManager}">
    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor1}" />
    <Setter Property="DocumentPaneControlStyle" Value="{StaticResource AvalonDock_ThemeVS2010_DocumentPaneControlStyle}" />
    <!--<Setter Property="AnchorablePaneControlStyle" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorablePaneControlStyle}" />-->
    <Setter Property="AnchorableExpanderPaneControlStyle" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorableExpanderControlStyle}" />
    <Setter Property="SecondarySideBarStyle" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorableExpanderGroupPaneControlStyle}" />
    <Setter Property="PrimarySideBarStyle" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorableGroupBoxControlStyle}" />
    <Setter Property="PanelStyle" Value="{StaticResource PanelStyle}" />
    <Setter Property="ActivityBarControlStyle" Value="{StaticResource AvalonDock_ThemeVS2010_ActivityBarControlStyle}" />
    <!--<Setter Property="ActivityBarTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_ActivityBarTemplate}" />-->
    <!--<Setter Property="AnchorSideTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorSideTemplate}" />
    <Setter Property="AnchorGroupTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorGroupTemplate}" />
    <Setter Property="AnchorTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorTemplate}" />-->
    <Setter Property="DocumentHeaderTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_DocumentHeaderTemplate}" />
    <Setter Property="AnchorableHeaderTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorableHeaderTemplate}" />
    <Setter Property="DocumentTitleTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_DocumentTitleTemplate}" />
    <Setter Property="AnchorableTitleTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorableTitleTemplate}" />
    <Setter Property="AnchorableContextMenu" Value="{StaticResource AvalonDock_ThemeVS2010_AnchorableContextMenu}" />
    <Setter Property="DocumentContextMenu" Value="{StaticResource AvalonDock_ThemeVS2010_DocumentContextMenu}" />
    <Setter Property="DocumentPaneMenuItemHeaderTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_DocumentHeaderTemplate}" />
    <Setter Property="IconContentTemplate" Value="{StaticResource AvalonDock_ThemeVS2010_IconContentTemplate}" />
    <Setter Property="GridSplitterWidth" Value="4" />
    <Setter Property="GridSplitterHeight" Value="4" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDock:DockingManager}">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter
                Grid.Row="1"
                Grid.Column="0"
                Content="{TemplateBinding ActivityBar}" />
              <ContentPresenter
                Grid.Row="1"
                Grid.Column="1"
                Content="{TemplateBinding LayoutRootPanel}" />
              <!--<ContentPresenter
                                Grid.Row="1"
                                Grid.Column="2"
                                Content="{TemplateBinding RightSidePanel}" />-->
              <!--<ContentPresenter
                                Grid.Row="1"
                                Grid.Column="2"
                                Content="{TemplateBinding LeftSidePanel }" />-->
              <!--<ContentPresenter
                                Grid.Row="0"
                                Grid.Column="1"
                                Content="{TemplateBinding TopSidePanel}" />-->
              <!--<ContentPresenter
                                Grid.Row="2"
                                Grid.Column="1"
                                Content="{TemplateBinding BottomSidePanel}" />-->
              <!--<ContentPresenter
                x:Name="PART_AutoHideArea"
                Grid.Row="1"
                Grid.Column="1"
                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                Content="{TemplateBinding AutoHideWindow}" />-->
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  LayoutGridResizerControl  -->
  <Style x:Key="{x:Type avalonDockControls:LayoutGridResizerControl}" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
          <!--<Border Background="{TemplateBinding Background}" />-->
          <Border Background="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
          <!--  Background="{TemplateBinding Background}"  -->

          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter
              Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
              ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
              ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
          <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.DocumentContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
            <Border
              Padding="0,2,0,1"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="3" Background="Transparent" />
                <ContentPresenter
                  Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{Binding DocumentHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                  ContentTemplateSelector="{Binding DocumentHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />
                <!--  Close button should be moved out to the container style  -->
                <Button
                  x:Name="DocumentCloseButton"
                  Grid.Column="2"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Command="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
                  Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                  ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
                  Visibility="Hidden">
                  <Image x:Name="PART_ImgPinClose" Source="Images/PinClose.png" />
                </Button>
              </Grid>
            </Border>
          </avalonDockControls:DropDownControlArea>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsSelected}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=IsLastFocusedDocument}" Value="true">
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
              <Setter TargetName="PART_ImgPinClose" Property="Source" Value="Images/PinClose_Dark.png" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsActive}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
              <Setter TargetName="PART_ImgPinClose" Property="Source" Value="Images/PinClose_Dark.png" />
            </MultiDataTrigger>
            <!--  BD: 17.08.2020 use HideCommand if CanClose=false but CanHide=true  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=CanClose}" Value="false" />
                <Condition Binding="{Binding Path=CanHide}" Value="true" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="DocumentCloseButton" Property="Command" Value="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="DocumentCloseButton" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Anchorable_Hide}" />
            </MultiDataTrigger>
            <!--  BD: 17.08.2020 hide button if both CanClose=false and CanHide=false  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=CanClose}" Value="false" />
                <Condition Binding="{Binding Path=CanHide}" Value="false" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
            <Trigger SourceName="DocumentCloseButton" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgPinClose" Property="Source" Value="Images/PinClose_Black.png" />
            </Trigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
          <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
            <Border
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

              <Grid>
                <ContentPresenter
                  Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                  ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />
                <avalonDockControls:DropDownControlArea
                  Grid.Column="0"
                  DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                  DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
            </Border>
          </avalonDockControls:DropDownControlArea>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type avalonDockControls:LayoutActivityTabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutActivityTabItem}">
          <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
            <Border
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

              <Grid Width="48" Height="48">
                <!--<ContentPresenter
                  Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{StaticResource AvalonDock_ThemeVS2010_ActiviyItemTemplate}"
                  ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />-->
                <ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource AvalonDock_ThemeVS2010_ActiviyItemTemplate}" />
                <avalonDockControls:DropDownControlArea
                  Grid.Column="0"
                  DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                  DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
              <!--<Viewbox>
								<Canvas>
									<Path Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z" Fill="{TemplateBinding Foreground}"/>
								</Canvas>
							</Viewbox>-->
            </Border>
          </avalonDockControls:DropDownControlArea>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
          <!--  Background="{TemplateBinding Background}"  -->
          <Border
            x:Name="Bd"
            Background="Green"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Background="YellowGreen">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Border
                x:Name="Header"
                Background="{DynamicResource AvalonDock_ThemeVS2010_BaseColor16}"
                CornerRadius="2,2,0,0">
                <avalonDockControls:AnchorablePaneTitle Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
              </Border>
              <!--
                Added ContentTemplate and ContentTemplateSelector
                https://github.com/xceedsoftware/wpftoolkit/issues/1525
              -->
              <ContentPresenter
                Grid.Row="1"
                Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
                ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                FlowDirection="{TemplateBinding FlowDirection}"
                Visibility="{Binding ContentVisibility}" />


              <!--<ContentPresenter
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                Grid.Row="1"/>-->
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <!--
                Hide the title if the control is directly hosted in floating window
                The floating window control will show the title if there is only one control to host
                without any other LayoutAnchorableControl
              -->
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <!--
                Also hide the title, if model cannot be bound which can happen when using virtualization
                See Issue #148 Drop Down Menu for LayoutAnchorables is not correct with Virtualization
              -->
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model}" Value="{x:Null}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="LayoutAnchorableStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
          <!--  Background="{TemplateBinding Background}"  -->
          <Border
            x:Name="Bd"
            Background="Green"
            BorderBrush="Red"
            BorderThickness="0">

            <ContentPresenter
              Grid.Row="1"
              Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
              ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
              ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
              FlowDirection="{TemplateBinding FlowDirection}" />
            <!--  Visibility="{Binding ContentVisibility}"  -->
          </Border>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <!--
                Hide the title if the control is directly hosted in floating window
                The floating window control will show the title if there is only one control to host
                without any other LayoutAnchorableControl
              -->
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True" />
              </MultiDataTrigger.Conditions>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <!--
                Also hide the title, if model cannot be bound which can happen when using virtualization
                See Issue #148 Drop Down Menu for LayoutAnchorables is not correct with Virtualization
              -->
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model}" Value="{x:Null}" />
              </MultiDataTrigger.Conditions>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style x:Key="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor10}" />
    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor33}" />
    <!--<Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor33}" />-->
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="shell:WindowChrome.WindowChrome">
      <Setter.Value>
        <shell:WindowChrome
          CaptionHeight="3"
          CornerRadius="0"
          GlassFrameThickness="0"
          ResizeBorderThickness="0"
          ShowSystemMenu="False" />
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
          <Grid>
            <Border
              x:Name="WindowBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
              <Grid Margin="3">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" MinHeight="18" />
                  <!--  https://github.com/xceedsoftware/wpftoolkit/issues/1203  -->
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Border x:Name="Header" Padding="2,0,2,0">
                  <Grid UseLayoutRounding="True">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter
                      Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
                      ContentTemplate="{Binding Model.Root.Manager.DocumentTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                      ContentTemplateSelector="{Binding Model.Root.Manager.DocumentTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />

                    <Button
                      x:Name="PART_PinMaximize"
                      Grid.Column="1"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                      Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
                      <Image
                        x:Name="PART_ImgPinMaximize"
                        Width="13"
                        Source="Images/PinMaximize.png" />
                    </Button>

                    <Button
                      x:Name="PART_PinRestore"
                      Grid.Column="1"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                      Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Image
                        x:Name="PART_ImgPinRestore"
                        Width="13"
                        Source="Images/PinRestore.png" />
                    </Button>

                    <Button
                      x:Name="PART_PinClose"
                      Grid.Column="2"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{Binding Path=CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Image
                        x:Name="PART_ImgPinClose"
                        Width="13"
                        Source="Images/PinClose.png" />
                    </Button>
                  </Grid>
                </Border>
                <ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="WindowBorder" Property="Padding" Value="3" />
            </Trigger>
            <Trigger SourceName="PART_PinMaximize" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgPinMaximize" Property="Source" Value="Images/PinMaximize_Black.png" />
            </Trigger>
            <Trigger SourceName="PART_PinRestore" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgPinRestore" Property="Source" Value="Images/PinRestore_Black.png" />
            </Trigger>
            <Trigger SourceName="PART_PinClose" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgPinClose" Property="Source" Value="Images/PinClose_Black.png" />
            </Trigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor5}" />
    <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor16}" />
    <Setter Property="BorderThickness" Value="4" />
    <Setter Property="AllowsTransparency" Value="True" />
    <Setter Property="WindowStyle" Value="None" />
    <Setter Property="shell:WindowChrome.WindowChrome">
      <Setter.Value>
        <shell:WindowChrome
          CaptionHeight="18"
          CornerRadius="7"
          GlassFrameThickness="0"
          ResizeBorderThickness="10" />
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
          <Grid>
            <Border
              x:Name="WindowBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" MinHeight="18" />
                  <!--  https://github.com/xceedsoftware/wpftoolkit/issues/1203  -->
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Border
                  x:Name="Header"
                  Padding="2,0,2,0"
                  Background="{DynamicResource AvalonDock_ThemeVS2010_BaseColor16}"
                  CornerRadius="1,1,0,0"
                  TextElement.Foreground="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}">
                  <Grid UseLayoutRounding="True">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Border Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter
                          Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
                          ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                          ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
                      </avalonDockControls:DropDownControlArea>
                    </Border>

                    <avalonDockControls:DropDownButton
                      x:Name="SinglePaneContextMenu"
                      Grid.Column="1"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      HorizontalContentAlignment="Center"
                      VerticalContentAlignment="Center"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                      DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource AvalonDock_ThemeVS2010_ToolButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}"
                      Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Image
                        x:Name="PART_ImgPinMenu"
                        Width="13"
                        Source="Images/PinMenu.png"
                        Stretch="None" />
                    </avalonDockControls:DropDownButton>

                    <Button
                      x:Name="PART_PinMaximize"
                      Grid.Column="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      HorizontalContentAlignment="Center"
                      VerticalContentAlignment="Center"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                      Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
                      <Image
                        x:Name="PART_ImgPinMaximize"
                        Width="13"
                        Source="Images/PinMaximize.png" />
                    </Button>

                    <Button
                      x:Name="PART_PinRestore"
                      Grid.Column="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                      Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Image
                        x:Name="PART_ImgPinRestore"
                        Width="13"
                        Source="Images/PinRestore.png" />
                    </Button>

                    <Button
                      x:Name="PART_PinClose"
                      Grid.Column="3"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{Binding HideWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource AvalonDock_ThemeVS2010_ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Image
                        x:Name="PART_ImgPinClose"
                        Width="13"
                        Source="Images/PinClose.png" />
                    </Button>
                  </Grid>
                </Border>
                <ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="WindowBorder" Property="Padding" Value="3" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="True">
              <Setter TargetName="Header" Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor15}" />
              <Setter TargetName="Header" Property="TextElement.Foreground" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor3}" />
              <Setter TargetName="PART_ImgPinClose" Property="Source" Value="Images/PinClose_Dark.png" />
              <Setter TargetName="PART_ImgPinRestore" Property="Source" Value="Images/PinRestore_Dark.png" />
              <Setter TargetName="PART_ImgPinMaximize" Property="Source" Value="Images/PinMaximize_Dark.png" />
              <Setter TargetName="PART_ImgPinMenu" Property="Source" Value="Images/PinMenu_Dark.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Model.SinglePane.SelectedContent.CanClose, RelativeSource={RelativeSource Mode=Self}}" Value="True">
              <Setter TargetName="PART_PinClose" Property="Command" Value="{Binding CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="PART_PinClose" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Document_Close}" />

            </DataTrigger>
            <Trigger SourceName="SinglePaneContextMenu" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgPinMenu" Property="Source" Value="Images/PinMenu_Black.png" />
            </Trigger>
            <Trigger SourceName="SinglePaneContextMenu" Property="IsChecked" Value="True">
              <Setter TargetName="PART_ImgPinMenu" Property="Source" Value="Images/PinMenu_Black.png" />
            </Trigger>
            <Trigger SourceName="PART_PinMaximize" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgPinMaximize" Property="Source" Value="Images/PinMaximize_Black.png" />
            </Trigger>
            <Trigger SourceName="PART_PinRestore" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgPinRestore" Property="Source" Value="Images/PinRestore_Black.png" />
            </Trigger>
            <Trigger SourceName="PART_PinClose" Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ImgPinClose" Property="Source" Value="Images/PinClose_Black.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsDragging" Value="True">
        <Setter Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsDragging" Value="False">
        <Setter Property="Opacity" Value="1.0" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--<Style x:Key="{x:Type avalonDockControls:LayoutAutoHideWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAutoHideWindowControl}">
    <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeVS2010_BaseColor5}" />
  </Style>-->

  <Style x:Key="AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle
            RadiusX="2"
            RadiusY="2"
            Stroke="#8E6EA6F5"
            StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <LinearGradientBrush x:Key="AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemHoverFill" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFF1FBFF" />
    <GradientStop Offset="1" Color="#FFD5F1FE" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemSelectedFill" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFD9F4FF" />
    <GradientStop Offset="1" Color="#FF9BDDFB" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemSelectedInactiveFill" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFEEEDED" />
    <GradientStop Offset="1" Color="#FFDDDDDD" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemSelectedHoverFill" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFEAF9FF" />
    <GradientStop Offset="1" Color="#FFC9EDFD" />
  </LinearGradientBrush>

  <Style x:Key="AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemStyle" TargetType="ListBoxItem">
    <Setter Property="FocusVisualStyle" Value="{StaticResource AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemFocusVisual}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="5,0,5,0" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="AutomationProperties.Name" Value="{Binding LayoutElement.Title}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="2"
            SnapsToDevicePixels="true">
            <Border
              x:Name="InnerBorder"
              BorderThickness="1"
              CornerRadius="1">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition MaxHeight="11" />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <Rectangle
                  x:Name="UpperHighlight"
                  Fill="#75FFFFFF"
                  Visibility="Collapsed" />
                <ContentPresenter
                  Grid.RowSpan="2"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </Grid>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" Value="{StaticResource AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemSelectedFill}" />
              <Setter Property="BorderBrush" Value="#FF98DDFB" />
              <Setter TargetName="InnerBorder" Property="BorderBrush" Value="#80FFFFFF" />
              <Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />
              <Setter TargetName="UpperHighlight" Property="Fill" Value="#40FFFFFF" />
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="Background" Value="{StaticResource AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemSelectedFill}" />
              <Setter Property="BorderBrush" Value="#FF98DDFB" />
              <Setter TargetName="InnerBorder" Property="BorderBrush" Value="#80FFFFFF" />
              <Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />
              <Setter TargetName="UpperHighlight" Property="Fill" Value="#40FFFFFF" />
            </Trigger>
            <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemSelectedHoverFill}"/>
                            <Setter Property="BorderBrush" Value="#FF98DDFB"/>
                        </MultiTrigger>-->
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type avalonDockControls:NavigatorWindow}" TargetType="{x:Type avalonDockControls:NavigatorWindow}">
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
    <Setter Property="SizeToContent" Value="WidthAndHeight" />
    <Setter Property="ResizeMode" Value="NoResize" />
    <Setter Property="shell:WindowChrome.WindowChrome">
      <Setter.Value>
        <shell:WindowChrome
          CaptionHeight="16"
          CornerRadius="3,3,3,3"
          GlassFrameThickness="4"
          ResizeBorderThickness="10" />
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:NavigatorWindow}">
          <Grid>
            <Border
              x:Name="WindowBorder"
              Background="{DynamicResource AvalonDock_ThemeVS2010_BaseColor2}"
              BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
              BorderThickness="1"
              CornerRadius="3">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="54" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <Grid Margin="5">
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Image
                      Source="{Binding SelectedDocument.LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}"
                      Stretch="None"
                      Visibility="{Binding SelectedDocument.LayoutElement.IconSource, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
                    <TextBlock
                      x:Name="selectedElementTitle"
                      Grid.Column="1"
                      Margin="4,0,0,0"
                      VerticalAlignment="Center"
                      FontWeight="Bold"
                      Text="{Binding SelectedDocument.LayoutElement.Title}"
                      TextTrimming="CharacterEllipsis" />
                  </Grid>
                  <TextBlock
                    x:Name="selectedElementDescription"
                    VerticalAlignment="Center"
                    Text="{Binding SelectedDocument.LayoutElement.Description}"
                    TextTrimming="CharacterEllipsis" />
                </Grid>

                <Border
                  Grid.Row="1"
                  MinHeight="200"
                  Background="{DynamicResource AvalonDock_ThemeVS2010_BaseColor7}"
                  BorderBrush="{DynamicResource AvalonDock_ThemeVS2010_BaseColor11}"
                  BorderThickness="0,1,0,0">
                  <Grid Margin="5">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid Margin="5">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                      </Grid.RowDefinitions>
                      <TextBlock
                        Margin="0,3,0,4"
                        FontWeight="Bold"
                        Text="{x:Static avalonDockProperties:Resources.Active_ToolWindows}" />
                      <ListBox
                        x:Name="PART_AnchorableListBox"
                        Grid.Row="1"
                        MaxHeight="400"
                        AutomationProperties.Name="{x:Static avalonDockProperties:Resources.Active_ToolWindows}"
                        Background="Transparent"
                        BorderThickness="0"
                        ItemContainerStyle="{StaticResource AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemStyle}"
                        ItemsSource="{Binding Anchorables}"
                        SelectedItem="{Binding SelectedAnchorable, Mode=TwoWay}">
                        <ListBox.ItemTemplate>
                          <DataTemplate>
                            <Grid>
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16" />
                                <ColumnDefinition Width="150" />
                              </Grid.ColumnDefinitions>
                              <Image Source="{Binding LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />
                              <TextBlock
                                Grid.Column="1"
                                Margin="4,0,0,0"
                                Text="{Binding LayoutElement.Title}"
                                TextTrimming="CharacterEllipsis" />
                            </Grid>
                          </DataTemplate>
                        </ListBox.ItemTemplate>
                      </ListBox>
                    </Grid>
                    <Grid Grid.Column="1" Margin="5">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                      </Grid.RowDefinitions>
                      <TextBlock
                        Margin="0,3,0,4"
                        FontWeight="Bold"
                        Text="{x:Static avalonDockProperties:Resources.Active_Files}" />
                      <ListBox
                        x:Name="PART_DocumentListBox"
                        Grid.Row="1"
                        MaxHeight="400"
                        AutomationProperties.Name="{x:Static avalonDockProperties:Resources.Active_Files}"
                        Background="Transparent"
                        BorderThickness="0"
                        ItemContainerStyle="{StaticResource AvalonDock_ThemeVS2010_NavigatorWindowListBoxItemStyle}"
                        ItemsSource="{Binding Documents}"
                        SelectedItem="{Binding SelectedDocument, Mode=TwoWay}">
                        <ListBox.ItemTemplate>
                          <DataTemplate>
                            <Grid>
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16" />
                                <ColumnDefinition Width="150" />
                              </Grid.ColumnDefinitions>
                              <Image Source="{Binding LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />
                              <TextBlock
                                Grid.Column="1"
                                Margin="4,0,0,0"
                                Text="{Binding LayoutElement.Title}"
                                TextTrimming="CharacterEllipsis" />
                            </Grid>
                          </DataTemplate>
                        </ListBox.ItemTemplate>
                        <ListBox.ItemsPanel>
                          <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" />
                          </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                      </ListBox>
                    </Grid>
                  </Grid>
                </Border>

                <Grid Grid.Row="2" Margin="5">
                  <TextBlock VerticalAlignment="Center" Text="{Binding SelectedDocument.LayoutElement.ToolTip}" />
                </Grid>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="SelectedDocument" Value="{x:Null}">
              <Setter TargetName="selectedElementTitle" Property="Text" Value="{Binding SelectedAnchorable.LayoutElement.Title}" />
              <Setter TargetName="selectedElementDescription" Property="Text" Value="{x:Null}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

  </Style>


</ResourceDictionary>
