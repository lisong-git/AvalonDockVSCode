<!--
  ************************************************************************
  AvalonDock
  
  Copyright (C) 2007-2013 Xceed Software Inc.
  
  This program is provided to you under the terms of the Microsoft Public
  License (Ms-PL) as published at https://opensource.org/licenses/MS-PL
  ************************************************************************
-->

<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:avalonDock="clr-namespace:AvalonDock;assembly=AvalonDock"
  xmlns:avalonDockControls="clr-namespace:AvalonDock.Controls;assembly=AvalonDock"
  xmlns:avalonDockConverters="clr-namespace:AvalonDock.Converters;assembly=AvalonDock"
  xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties;assembly=AvalonDock"
  xmlns:reskeys="clr-namespace:AvalonDock.Themes.VS2013.Themes"
  xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=AvalonDock">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/AvalonDock.Themes.VS2013;component/OverlayButtons.xaml" />
    <ResourceDictionary Source="/AvalonDock.Themes.VS2013;component/Themes/Menu/MenuItem.xaml" />
    <ResourceDictionary Source="/AvalonDock.Themes.VS2013;component/Themes/Icons/IconGeometry.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="DropDownControlArea" TargetType="avalonDockControls:DropDownControlArea" />

  <!--#region ToolBarOverflowToggleButtonStyle-->
  <Style
    x:Key="ToolBarOverflowToggleButtonStyle"
    BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
    TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border
            x:Name="Bd"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>

            <!--  Tool Window : Tab / Unselected, hovered  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="true" />
                <Condition Property="Selector.IsSelected" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredBackground}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredText}}" />
              <Setter Property="Panel.ZIndex" Value="0" />
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>

        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--#region ActivityBarButtonStyle-->
  <Style
    x:Key="ActivityBarButtonStyle"
    BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
    TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid SnapsToDevicePixels="true">
            <Border x:Name="Bd" Background="{TemplateBinding Background}">
              <Viewbox Margin="{TemplateBinding Padding}" Stretch="Uniform">
                <ContentPresenter />
              </Viewbox>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredBackground}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredText}}" />
              <Setter Property="Panel.ZIndex" Value="0" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style
    x:Key="ToolButtonStyle"
    BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
    TargetType="Button">
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <!--<Setter Property="Focusable" Value="True" />-->

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid SnapsToDevicePixels="true">
            <Border
              x:Name="SelectedBD"
              Margin="1,-1,1,0"
              BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveBackground}}"
              BorderThickness="0,1,0,0"
              Visibility="Collapsed" />

            <Border Background="{TemplateBinding Background}">
              <Viewbox
                Width="8"
                Height="8"
                Stretch="Uniform">
                <ContentPresenter />
              </Viewbox>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Selector.IsSelected" Value="true">
              <Setter TargetName="SelectedBD" Property="Visibility" Value="Visible" />
              <Setter Property="Panel.ZIndex" Value="1" />
            </Trigger>

            <!--  Tool Window : Tab / Unselected, hovered  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="true" />
                <Condition Property="Selector.IsSelected" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredBackground}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredText}}" />
              <Setter Property="Panel.ZIndex" Value="0" />
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>

        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--#endregion-->

  <!--#region ToolToggleButtonStyle-->
  <Style
    x:Key="ToolToggleButtonStyle"
    BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
    TargetType="ToggleButton">
    <!--<Setter Property="Margin" Value="0,8,0,0" />-->
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
            <Border
              Margin="4,1"
              HorizontalAlignment="Center"
              VerticalAlignment="Center">
              <Viewbox>
                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
              </Viewbox>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Selector.IsSelected" Value="true">
              <Setter Property="Panel.ZIndex" Value="1" />
            </Trigger>

            <!--  Tool Window : Tab / Unselected, hovered  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="true" />
                <Condition Property="Selector.IsSelected" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredBackground}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredText}}" />
              <Setter Property="Panel.ZIndex" Value="0" />
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <Style x:Key="ButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="Green" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <!--<Setter Property="BorderBrush" Value="{DynamicResource BaseColor31}" />
        <Setter Property="Background" Value="{DynamicResource BaseColor10}" />-->
        <Setter Property="Foreground" Value="White" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <ControlTemplate x:Key="DefaultExpanderToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Grid Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <ContentPresenter
        x:Name="ContentPresenter"
        Grid.Column="1"
        Margin="8,0,0,0"
        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
        Content="{TemplateBinding Content}" />
      <Grid
        x:Name="ChevronGrid"
        Grid.Column="0"
        Margin="6,0,0,0"
        VerticalAlignment="Center"
        Background="Transparent"
        RenderTransformOrigin="0.5, 0.5">
        <Grid.RenderTransform>
          <RotateTransform Angle="-90" />
        </Grid.RenderTransform>

        <Path
          x:Name="ControlChevronIcon"
          Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"
          Fill="{TemplateBinding Foreground}"
          Stretch="Uniform" />

      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation
                Storyboard.TargetName="ChevronGrid"
                Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)"
                To="0"
                Duration="00:00:00.050" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation
                Storyboard.TargetName="ChevronGrid"
                Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)"
                To="-90"
                Duration="00:00:00.050" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <!--<DataTrigger Binding="{Binding Path=ExpandDirection, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutAnchorableControl}}}" Value="Left">
        <Setter TargetName="PART_ToolBar" Property="Visibility" Value="Visible" />
      </DataTrigger>-->
    </ControlTemplate.Triggers>
  </ControlTemplate>


  <!--#region ToolBarStyle-->
  <Style
    x:Key="{x:Static ToolBar.ButtonStyleKey}"
    BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
    TargetType="{x:Type Button}">
    <!--<Setter Property="Foreground" Value="{TemplateBinding Foreground}" />-->
    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionInactiveText}}" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>


  <Style x:Key="SimpleToolBar" TargetType="{x:Type ToolBar}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <Grid
            Name="Grid"
            Width="{TemplateBinding Width}"
            Height="{TemplateBinding Height}"
            Margin="0"
            SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Border
              x:Name="MainPanelBorder"
              Grid.Column="0"
              Padding="{TemplateBinding Padding}"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
              <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                <!--<Thumb
                   x:Name="ToolBarThumb"
                   Width="10"
                   Margin="-3,-1,0,0"
                   Padding="6,5,1,6"
                   Visibility="Collapsed"
                   />-->
                <ContentPresenter
                  x:Name="ToolBarHeader"
                  Margin="0,0,0,0"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  ContentSource="Header"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <ToolBarPanel
                  x:Name="PART_ToolBarPanel"
                  Margin="0"
                  IsItemsHost="true"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </DockPanel>
            </Border>
            <Grid
              x:Name="OverflowGrid"
              Grid.Column="1"
              HorizontalAlignment="Right"
              DockPanel.Dock="Right">
              <ToggleButton
                x:Name="OverflowButton"
                Width="21"
                Height="21"
                HorizontalAlignment="Center"
                Foreground="{TemplateBinding Foreground}"
                IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                IsEnabled="{TemplateBinding HasOverflowItems}"
                Style="{StaticResource ToolToggleButtonStyle}"
                Visibility="{Binding Path=HasOverflowItems, Converter={avalonDockConverters:BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                <!--  ic_fluent_more_horizontal_24_filled  -->
                <Path
                  Data="{StaticResource ic_fluent_more_horizontal_24_filled}"
                  Fill="{TemplateBinding Foreground}"
                  Stretch="Uniform" />
              </ToggleButton>
              <Popup
                x:Name="OverflowPopup"
                AllowsTransparency="true"
                Focusable="false"
                IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                StaysOpen="false">
                <Border
                  x:Name="ToolBarSubMenuBorder"
                  BorderThickness="1"
                  RenderOptions.ClearTypeHint="Enabled">
                  <ToolBarOverflowPanel
                    x:Name="PART_ToolBarOverflowPanel"
                    Margin="0"
                    FocusVisualStyle="{x:Null}"
                    Focusable="true"
                    KeyboardNavigation.DirectionalNavigation="Cycle"
                    KeyboardNavigation.TabNavigation="Cycle"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    WrapWidth="42" />
                </Border>
              </Popup>
            </Grid>
          </Grid>


          <ControlTemplate.Triggers>
            <Trigger Property="Header" Value="{x:Null}">
              <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <!--<Trigger SourceName="OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                                <Setter TargetName="Shdw" Property="SnapsToDevicePixels" Value="true" />
                                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                            </Trigger>-->
            <Trigger Property="Orientation" Value="Vertical">
              <Setter TargetName="Grid" Property="Margin" Value="0" />
              <!--<Setter TargetName="OverflowButton" Property="Style" Value="{StaticResource &#384;}" />-->
              <!--<Setter TargetName="ToolBarThumb" Property="Height" Value="10" />
                                <Setter TargetName="ToolBarThumb" Property="Width" Value="Auto" />
                                <Setter TargetName="ToolBarThumb" Property="Margin" Value="-1,-3,0,0" />
                                <Setter TargetName="ToolBarThumb" Property="Padding" Value="5,6,6,1" />-->
              <Setter TargetName="ToolBarHeader" Property="Margin" Value="0,0,0,0" />
              <Setter TargetName="PART_ToolBarPanel" Property="Margin" Value="0" />
              <!--<Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top" />-->
              <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="OverflowGrid" Property="HorizontalAlignment" Value="Stretch" />
              <Setter TargetName="OverflowGrid" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="OverflowPopup" Property="Placement" Value="Right" />
              <!--<Setter TargetName="MainPanelBorder" Property="Margin" Value="0,0,0,0" />-->
              <!--<Setter Property="Background" Value="Blue" />-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
        <!--  This trigger on a SystemParameter works because switching into high contrast mode requires a re-evaluation of theme  -->
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <!--#endregion-->



  <!--#region  DocumentPaneControl ScrollViewerStyle-->

  <!--<Color x:Key="ControlFillColorDefault">#0FFFFFFF</Color>-->

  <Color x:Key="ControlStrongFillColorDefault">#FF768166</Color>



  <Style x:Key="UiScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="UiScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="Background">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource ControlStrongFillColorDefault}" />
      </Setter.Value>
    </Setter>
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="0"
            CornerRadius="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="UiHorizontalScrollBar" TargetType="{x:Type ScrollBar}">
    <Track
      x:Name="PART_Track"
      Grid.Column="1"
      Height="3"
      VerticalAlignment="Center"
      IsDirectionReversed="False">
      <Track.DecreaseRepeatButton>
        <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource UiScrollBarPageButton}" />
      </Track.DecreaseRepeatButton>
      <Track.Thumb>
        <Thumb
          Margin="0"
          Padding="0"
          Style="{StaticResource UiScrollBarThumb}" />
      </Track.Thumb>
      <Track.IncreaseRepeatButton>
        <RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource UiScrollBarPageButton}" />
      </Track.IncreaseRepeatButton>
    </Track>
  </ControlTemplate>

  <Style x:Key="UiScrollBar" TargetType="{x:Type ScrollBar}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template" Value="{StaticResource UiHorizontalScrollBar}" />
  </Style>

  <Style x:Key="UiScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Margin" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Margin="{TemplateBinding Padding}">
            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" />

            <ScrollBar
              x:Name="PART_HorizontalScrollBar"
              Grid.Row="0"
              Grid.Column="0"
              VerticalAlignment="Bottom"
              Maximum="{TemplateBinding ScrollableWidth}"
              Orientation="Horizontal"
              Style="{StaticResource UiScrollBar}"
              ViewportSize="{TemplateBinding ViewportWidth}"
              Visibility="Collapsed"
              Value="{TemplateBinding HorizontalOffset}" />

          </Grid>

          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_HorizontalScrollBar" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--#endregion-->

  <!--#region  DocumentPaneControlStyle-->
  <Style x:Key="DocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
    <Setter Property="BorderBrush" Value="{x:Null}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.TabBackground}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />
            <Grid
              Grid.Row="0"
              Margin="0,0"
              Panel.ZIndex="1"
              ScrollViewerHelper.WheelScrollsHorizontally="True"
              Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type avalonDockControls:LayoutDocumentPaneControl}}, Path=Model.ShowHeader, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Border
                x:Name="BD"
                Grid.ColumnSpan="2"
                BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedActiveBackground}}"
                BorderThickness="0,0,0,1" />
              <ScrollViewer
                x:Name="DocumentPaneTabPanelWrapPanel"
                Grid.Row="0"
                Grid.Column="0"
                HorizontalScrollBarVisibility="Visible"
                Style="{DynamicResource UiScrollViewer}"
                VerticalScrollBarVisibility="Hidden">
                <!--<ScrollViewer.Resources>
                  <Style BasedOn="{StaticResource UiScrollBar}" TargetType="{x:Type ScrollBar}" />
                </ScrollViewer.Resources>-->

                <DocumentPaneTabPanel
                  x:Name="HeaderPanel"
                  Grid.Row="0"
                  Grid.Column="0"
                  Margin="2,2,2,0"
                  Panel.ZIndex="1"
                  IsItemsHost="true"
                  KeyboardNavigation.TabIndex="1" />
              </ScrollViewer>

              <avalonDockControls:DropDownButton
                x:Name="MenuDropDownButton"
                Grid.Column="1"
                Width="18"
                Height="18"
                Margin="6,0,6,2"
                Padding="4"
                Focusable="False"
                Style="{StaticResource ToolBarOverflowToggleButtonStyle}">
                <avalonDockControls:DropDownButton.DropDownContextMenu>
                  <avalonDockControls:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}" />
                </avalonDockControls:DropDownButton.DropDownContextMenu>
                <Path
                  x:Name="MenuDropDownButtonImage"
                  Height="8"
                  Margin="2,2,2,2"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="{DynamicResource ic_fluent_more_horizontal_24_filled}"
                  Fill="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellOverflowButtonDefaultGlyph}}"
                  Stretch="Uniform" />
              </avalonDockControls:DropDownButton>
            </Grid>
            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Grid.Column="0"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Stretch"
              Background="{TemplateBinding Background}"
              BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.PanelBorderBrush}}"
              BorderThickness="0,0,0,0"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                Margin="0"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="MenuDropDownButton" Property="IsMouseOver" Value="True">
              <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellOverflowButtonHoveredBackground}}" />
              <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellOverflowButtonHoveredBorder}}" />
              <Setter TargetName="MenuDropDownButtonImage" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellOverflowButtonHoveredGlyph}}" />
            </Trigger>

            <Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
              <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellOverflowButtonPressedBackground}}" />
              <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellOverflowButtonPressedBorder}}" />
              <Setter TargetName="MenuDropDownButtonImage" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellOverflowButtonPressedGlyph}}" />
            </Trigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding SelectedItem.IsActive, RelativeSource={RelativeSource Self}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="BD" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedInactiveBackground}}" />
            </MultiDataTrigger>

            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
              <Setter TargetName="BD" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="ContentPanel" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="MenuDropDownButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ShowHeader}" Value="False">
              <Setter TargetName="ContentPanel" Property="BorderThickness" Value="1" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabUnselectedBackground}}" />
          <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabUnselectedText}}" />
          <Setter Property="BorderBrush" Value="Transparent" />
          <Setter Property="ToolTip" Value="{Binding ToolTip}" />
          <Setter Property="Padding" Value="6,1" />
          <Setter Property="Margin" Value="0" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="Bd"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{Binding Background, RelativeSource={RelativeSource Self}}"
                    BorderThickness="0,0,0,2" />
                  <ContentPresenter
                    x:Name="Content"
                    HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                    VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter Property="Panel.ZIndex" Value="1" />
                  </Trigger>

                  <!--  Document Well : Tab / Selected, active  -->
                  <DataTrigger Binding="{Binding IsActive}" Value="True">
                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedActiveBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedActiveText}}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                  </DataTrigger>

                  <!--  Document Well : Tab / Selected, inactive  -->
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsActive}" Value="False" />
                      <Condition Binding="{Binding IsSelected}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedInactiveBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedInactiveText}}" />
                  </MultiDataTrigger>

                  <!--  Document Well : Tab / Unselected  -->
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsActive}" Value="False" />
                      <Condition Binding="{Binding IsSelected}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Bd" Property="BorderBrush" Value="Transparent" />
                  </MultiDataTrigger>

                  <!--  Document Well : Tab / Unselected, hovered  -->
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabUnselectedHoveredBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabUnselectedHoveredText}}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>

                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutDocumentTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutDocumentControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--#region ActivityBarControlStyle-->
  <Style x:Key="ActivityBarControlStyle" TargetType="{x:Type avalonDockControls:LayoutActivityBarControl}">
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="TabStripPlacement" Value="Left" />
    <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
    <Setter Property="Padding" Value="0" />
    <!--<Setter Property="BorderBrush" Value="{TemplateBinding BorderBrush}"/>-->
    <Setter Property="BorderThickness" Value="1" />
    <!--<Setter Property="SelectedItem" Value="{Binding Model.SelectedItem, RelativeSource={RelativeSource Self}}" />
		<Setter Property="SelectedIndex" Value="{Binding Model.SelectedIndex, RelativeSource={RelativeSource Self}}" />-->
    <!--<Setter Property="Tag" Value="{Binding Model, RelativeSource={RelativeSource Self}}" />-->
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutActivityBarControl}">
          <!--<Border BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.GridResizerBackground}}" BorderThickness="0,0,1,0">-->
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="28" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <WrapPanel
              x:Name="PART_ActivityTabItemWarpContainer"
              Grid.Row="0"
              Grid.Column="0"
              Background="Transparent"
              Orientation="Vertical">

              <DockPanel LastChildFill="True">
                <Grid
                  x:Name="OverflowGrid"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  DockPanel.Dock="Bottom">
                  <ToggleButton
                    x:Name="OverflowButton"
                    Width="42"
                    Height="42"
                    ClickMode="Press"
                    Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedText}}"
                    IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ToolBarOverflowToggleButtonStyle}"
                    Visibility="{Binding Model.HasOverflowItem, Converter={avalonDockConverters:BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">

                    <Grid HorizontalAlignment="Center">
                      <Path
                        Margin="0,0,0,12"
                        Data="{StaticResource ic_fluent_more_horizontal_24_filled}"
                        Fill="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveGlyph}}" />
                    </Grid>
                  </ToggleButton>

                  <Popup
                    x:Name="OverflowPopup"
                    AllowsTransparency="True"
                    Focusable="false"
                    IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Right"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                    StaysOpen="False">

                    <ListBox
                      MinWidth="64"
                      MinHeight="21"
                      Background="{TemplateBinding Background}"
                      DockPanel.Dock="Bottom"
                      Foreground="{TemplateBinding Foreground}"
                      ItemsSource="{Binding Model.OverflowItems, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                      SelectedItem="{Binding Model.SelectedItem, Mode=OneWayToSource, RelativeSource={RelativeSource TemplatedParent}}">
                      <ListBox.ItemTemplate>
                        <DataTemplate>
                          <Grid>
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="16" />
                              <ColumnDefinition Width="150" />
                            </Grid.ColumnDefinitions>
                            <TextBlock
                              Grid.Column="1"
                              Margin="4,0,0,0"
                              Tag="{Binding}"
                              Text="{Binding Title}"
                              TextTrimming="CharacterEllipsis" />
                          </Grid>
                        </DataTemplate>
                      </ListBox.ItemTemplate>
                    </ListBox>
                  </Popup>

                </Grid>

                <avalonDockControls:ActivityBarTabPanel
                  x:Name="HeaderPanel"
                  Grid.Row="1"
                  Width="42"
                  Margin="0"
                  Panel.ZIndex="1"
                  IsItemsHost="true"
                  KeyboardNavigation.TabIndex="1" />
              </DockPanel>
            </WrapPanel>

            <StackPanel Grid.Row="2" Width="42">
              <StackPanel.Resources>
                <Style BasedOn="{StaticResource ActivityBarButtonStyle}" TargetType="{x:Type Button}">
                  <Setter Property="Padding" Value="8" />
                  <Setter Property="HorizontalAlignment" Value="Stretch" />
                  <Setter Property="Height" Value="42" />
                </Style>
              </StackPanel.Resources>

              <Button Command="{Binding Model.TestCommand, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <Path
                  Data="{DynamicResource Fluent}"
                  Fill="{TemplateBinding Foreground}"
                  Stretch="Uniform" />
              </Button>

              <Button ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <!--  ic_fluent_apps_32_filled  -->
                <Path
                  Data="{DynamicResource FluentApps}"
                  Fill="{TemplateBinding Foreground}"
                  Visibility="Visible" />
              </Button>

              <Button Margin="0,0,0,8" ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <Path
                  Data="{DynamicResource Person}"
                  Fill="{TemplateBinding Foreground}"
                  Visibility="Visible" />
              </Button>
            </StackPanel>
          </Grid>
          <!--</Border>-->
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>

            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
            </DataTrigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedBackground}}" />
          <Setter Property="BorderBrush" Value="Transparent" />
          <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedText}}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="ToolTip" Value="{Binding ToolTip}" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" SnapsToDevicePixels="true">
                  <Border
                    x:Name="SelectedBD"
                    Margin="1,-1,1,0"
                    BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveBackground}}"
                    BorderThickness="0,1,0,0"
                    Visibility="Hidden" />

                  <Border
                    x:Name="Bd"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0">
                    <ContentPresenter
                      x:Name="Content"
											Margin="4"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <!--
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                    -->
                  </Border>
                  <Rectangle
                    x:Name="ActiveRectangle"
                    Width="3"
                    Height="34"
                    Margin="0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Fill="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedInactiveText}}"
                    Opacity="0.0"
                    RadiusX="1"
                    RadiusY="1" />
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter TargetName="SelectedBD" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.PanelBorderBrush}}" />
                    <Setter TargetName="ActiveRectangle" Property="Opacity" Value="1.0" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                  </Trigger>

                  <!--  Tool Window : Tab / Selected, active  -->
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsSelected}" Value="True" />
                      <Condition Binding="{Binding IsActive}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveText}}" />
                  </MultiDataTrigger>

                  <!--  Tool Window : Tab / Selected, inactive  -->
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsSelected}" Value="True" />
                      <Condition Binding="{Binding IsActive}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedInactiveBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedInactiveText}}" />
                  </MultiDataTrigger>

                  <!--  Tool Window : Tab / Unselected, hovered  -->
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredText}}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>

                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutActivityTabItem Model="{Binding}" Tag="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--  region  DefaultLayoutAnchorableExpanderGroupPaneControlStyle  -->
  <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupPaneControl}">
    <Setter Property="TabStripPlacement" Value="Bottom" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupPaneControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />

            <!--  Shadow HeaderPanel for TabControl  -->
            <!--<avalonDockControls:AnchorablePaneTabPanel
                            x:Name="HeaderPanel"
                            Grid.Row="0"
                            IsItemsHost="true"
							KeyboardNavigation.TabIndex="1" />-->

            <avalonDockControls:AnchorablePaneTabPanel
              x:Name="HeaderPanel"
              Grid.Row="0"
              Panel.ZIndex="1"
              IsItemsHost="true"
              KeyboardNavigation.TabIndex="1" />

            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="0"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>

          </Grid>
          <!--<ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
                            <Setter TargetName="HeaderPanel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                    </ControlTemplate.Triggers>-->

        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedBackground}}" />
          <Setter Property="BorderBrush" Value="Transparent" />
          <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedText}}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="ToolTip" Value="{Binding ToolTip}" />
          <!--<Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}"/>-->
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="SelectedBD"
                    Margin="1,-1,1,0"
                    BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveBackground}}"
                    BorderThickness="0,1,0,0"
                    Visibility="Collapsed" />
                  <Border
                    x:Name="Bd"
                    Margin="0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding Background}"
                    BorderThickness="1,0,1,1">

                    <ContentPresenter
                      x:Name="Content"
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter TargetName="SelectedBD" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.PanelBorderBrush}}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource BaseColor14}" />
                    <Setter Property="Background" Value="{DynamicResource BaseColor6}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="BorderBrush" Value="{DynamicResource BaseColor13}" />
                    <Setter Property="Background" Value="{DynamicResource BaseColor9}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <!--<Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>-->
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableGroupTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

  </Style>
  <!--#endregion-->

  <!--  region  PrimarySideBarStyle  -->
  <Style x:Key="PrimarySideBarStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupPaneControl}">
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupPaneControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="28" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />

            <!--  Shadow HeaderPanel for TabControl  -->
            <avalonDockControls:AnchorablePaneTabPanel
              x:Name="HeaderPanel"
              Grid.Row="2"
              Height="0"
              Margin="0"
              IsEnabled="True"
              IsItemsHost="true"
              Visibility="Visible" />

            <!--  x:Name="FactHeaderPanel"  -->
            <Grid x:Name="FactHeaderPanel" Grid.Row="0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" MinWidth="16" />
                <ColumnDefinition Width="Auto" MinWidth="48" />
              </Grid.ColumnDefinitions>

              <TextBlock
                Grid.Column="0"
                Margin="27,0,0,0"
                VerticalAlignment="Center"
                FontSize="14"
                FontWeight="Thin"
                Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=LayoutAnchorableGroupPaneControl}}"
                Text="{Binding Path=Model.Title, RelativeSource={RelativeSource TemplatedParent}}" />

              <ToolBarTray
                Grid.Column="1"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Background="Transparent">
                <ToolBar Style="{DynamicResource SimpleToolBar}">
                  <Button
                    Width="21"
                    Height="21"
                    Content="壹"
                    ToolBar.OverflowMode="Always" />
                  <Button
                    Width="21"
                    Height="21"
                    Content="贰"
                    ToolBar.OverflowMode="Always" />
                  <Button
                    Width="21"
                    Height="21"
                    Content="叁"
                    ToolBar.OverflowMode="Always" />
                </ToolBar>
              </ToolBarTray>
            </Grid>

            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Grid.Column="0"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="0"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle"
              Visibility="Visible">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>

          </Grid>
          <!--<ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
            </DataTrigger>
          </ControlTemplate.Triggers>-->
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedBackground}}" />
          <Setter Property="BorderBrush" Value="Transparent" />
          <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedText}}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="ToolTip" Value="{Binding ToolTip}" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="SelectedBD"
                    Margin="1,-1,1,0"
                    BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveBackground}}"
                    BorderThickness="0,1,0,0"
                    Visibility="Collapsed" />
                  <Border
                    x:Name="Bd"
                    Margin="0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding Background}"
                    BorderThickness="1,0,1,1">

                    <ContentPresenter
                      x:Name="Content"
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter TargetName="SelectedBD" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.PanelBorderBrush}}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource BaseColor14}" />
                    <Setter Property="Background" Value="{DynamicResource BaseColor6}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="BorderBrush" Value="{DynamicResource BaseColor13}" />
                    <Setter Property="Background" Value="{DynamicResource BaseColor9}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <!--<Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>-->
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableGroupTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

  </Style>
  <!--#endregion-->

  <!--#region SecondarySideBarStyle-->
  <Style x:Key="SecondarySideBarStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupPaneControl}">
    <Setter Property="TabStripPlacement" Value="Bottom" />
    <Setter Property="BorderBrush" Value="{x:Null}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupPaneControl}">
          <Grid
            ClipToBounds="true"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />

            <Grid
              Grid.Row="0"
              Margin="0,0"
              Panel.ZIndex="1">
              <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Border
                x:Name="Bd"
                Grid.ColumnSpan="2"
                Panel.ZIndex="1"
                BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.GridResizerBackground}}"
                BorderThickness="0,0,0,1" />

              <WrapPanel
                x:Name="WarpContainer"
                Grid.Row="0"
                Margin="4,0,0,0"
                Orientation="Horizontal">
                <!--  DockPanel有bug,要用Grid  -->
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <ToggleButton
                    x:Name="OverflowToggleButton"
                    Grid.Column="1"
                    Width="21"
                    Height="21"
                    DockPanel.Dock="Right"
                    Style="{StaticResource ToolToggleButtonStyle}"
                    Visibility="{Binding HasOverflowItems, Mode=OneWay, ElementName=HeaderPanel, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                    <Path
                      Data="{StaticResource ic_fluent_more_horizontal_24_filled}"
                      Fill="{TemplateBinding Foreground}"
                      Stretch="Uniform" />
                  </ToggleButton>

                  <avalonDockControls:AnchorablePaneTabPanel
                    x:Name="HeaderPanel"
                    Grid.Column="0"
                    Panel.ZIndex="1"
                    IsItemsHost="true"
                    KeyboardNavigation.TabIndex="1" />
                </Grid>
              </WrapPanel>

              <ToolBar
                x:Name="PART_ToolBar"
                Grid.Column="1"
                Background="Transparent"
                DockPanel.Dock="Right"
                Style="{DynamicResource SimpleToolBar}"
                UseLayoutRounding="False">
                <Button
                  Width="21"
                  Height="21"
                  Content="I1" />
                <Button
                  Width="21"
                  Height="21"
                  Content="I2" />
                <Button
                  Width="21"
                  Height="21"
                  Content="I3"
                  ToolBar.OverflowMode="Always" />
              </ToolBar>
            </Grid>

            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Grid.Column="0"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle"
              Visibility="Visible">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>

          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <!--<DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
            </DataTrigger>-->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedBackground}}" />
          <Setter Property="BorderBrush" Value="Transparent" />
          <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedText}}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="ToolTip" Value="{Binding ToolTip}" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="SelectedBD"
                    Margin="1,-1,1,0"
                    BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveBackground}}"
                    BorderThickness="0,1,0,0"
                    Visibility="Collapsed" />
                  <Border
                    x:Name="Bd"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0">

                    <ContentPresenter
                      x:Name="Content"
                      Margin="6,1,6,3"
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter TargetName="SelectedBD" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.PanelBorderBrush}}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                  </Trigger>
                  <!--  Tool Window : Tab / Selected, active  -->
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsSelected}" Value="True" />
                      <Condition Binding="{Binding IsActive}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveText}}" />
                  </MultiDataTrigger>

                  <!--  Tool Window : Tab / Selected, inactive  -->
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsSelected}" Value="True" />
                      <Condition Binding="{Binding IsActive}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedInactiveBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedInactiveText}}" />
                  </MultiDataTrigger>

                  <!--  Tool Window : Tab / Unselected, hovered  -->
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredText}}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>

                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <!--<Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>-->
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableGroupTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--#region PanelStyle-->

  <Style x:Key="PanelStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupPaneControl}">
    <Setter Property="TabStripPlacement" Value="Bottom" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupPaneControl}">
          <Grid
            ClipToBounds="True"
            KeyboardNavigation.TabNavigation="Local"
            SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!--  Following border is required to catch mouse events  -->
            <Border Grid.RowSpan="2" Background="Transparent" />

            <Grid
              Grid.Row="0"
              Margin="0,0"
              Panel.ZIndex="1">
              <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Border
                x:Name="Bd"
                Grid.ColumnSpan="2"
                BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.GridResizerBackground}}"
                BorderThickness="0,0,0,1" />

              <WrapPanel
                x:Name="WarpContainer"
                Grid.Row="0"
                Margin="4,0,0,1"
                Orientation="Horizontal">
                <DockPanel>
                  <ToggleButton
                    x:Name="OverflowToggleButton"
                    Width="21"
                    Height="21"
                    DockPanel.Dock="Right"
                    Style="{StaticResource ToolToggleButtonStyle}"
                    Visibility="{Binding HasOverflowItems, Mode=OneWay, ElementName=HeaderPanel, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                    <Path
                      Data="{StaticResource ic_fluent_more_horizontal_24_filled}"
                      Fill="{TemplateBinding Foreground}"
                      Stretch="Uniform" />
                  </ToggleButton>

                  <avalonDockControls:AnchorablePaneTabPanel
                    x:Name="HeaderPanel"
                    Panel.ZIndex="1"
                    IsItemsHost="true"
                    KeyboardNavigation.TabIndex="1" />
                </DockPanel>
              </WrapPanel>

              <ToolBar
                x:Name="PART_ToolBar"
                Grid.Column="1"
                Background="Transparent"
                DockPanel.Dock="Right"
                Style="{DynamicResource SimpleToolBar}"
                UseLayoutRounding="False">
                <Button
                  Width="21"
                  Height="21"
                  Content="I1" />
                <Button
                  Width="21"
                  Height="21"
                  Content="I2" />
                <Button
                  Width="21"
                  Height="21"
                  Content="I3"
                  ToolBar.OverflowMode="Always" />
              </ToolBar>
            </Grid>
            <Border
              x:Name="ContentPanel"
              Grid.Row="1"
              Grid.Column="0"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2"
              KeyboardNavigation.TabNavigation="Cycle"
              Visibility="Visible">
              <ContentPresenter
                x:Name="PART_SelectedContentHost"
                Margin="{TemplateBinding Padding}"
                ContentSource="SelectedContent"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <!--<DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0" />
            </DataTrigger>-->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedBackground}}" />
          <Setter Property="BorderBrush" Value="Transparent" />
          <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedText}}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="ToolTip" Value="{Binding ToolTip}" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border
                    x:Name="SelectedBD"
                    Margin="1,-1,1,0"
                    BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveBackground}}"
                    BorderThickness="0,1,0,0"
                    Visibility="Collapsed" />
                  <Border
                    x:Name="Bd"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0,0,0,0">
                    <ContentPresenter
                      x:Name="Content"
                      Margin="0"
                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                      ContentSource="Header"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="Selector.IsSelected" Value="true">
                    <Setter TargetName="SelectedBD" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.PanelBorderBrush}}" />
                    <Setter Property="Panel.ZIndex" Value="1" />
                  </Trigger>

                  <!--  Tool Window : Tab / Selected, active  -->
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsSelected}" Value="True" />
                      <Condition Binding="{Binding IsActive}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedActiveText}}" />
                  </MultiDataTrigger>

                  <!--  Tool Window : Tab / Selected, inactive  -->
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsSelected}" Value="True" />
                      <Condition Binding="{Binding IsActive}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedInactiveBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabSelectedInactiveText}}" />
                  </MultiDataTrigger>

                  <!--  Tool Window : Tab / Unselected, hovered  -->
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="true" />
                      <Condition Property="Selector.IsSelected" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredBackground}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowTabUnselectedHoveredText}}" />
                    <Setter Property="Panel.ZIndex" Value="0" />
                  </MultiTrigger>

                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <!--<Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </Style.Triggers>-->
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableGroupTabItem Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableGroupControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->



  <!--#region AnchorableExpanderControlStyle-->
  <Style x:Key="AnchorableExpanderControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
    <!--<Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />-->
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="IsExpanded" Value="{Binding Model.IsExpanded, RelativeSource={RelativeSource Self}}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="ExpandDirection" Value="{Binding ExpandDirection, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
          <Border
            x:Name="Border"
            Margin="0"
            Padding="0"
            BorderBrush="{x:Null}"
            BorderThickness="0">

            <!--
              HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
              VerticalAlignment="{TemplateBinding VerticalAlignment}"
            -->
            <DockPanel Background="Transparent" LastChildFill="True">
              <AnchorableTitle
                x:Name="HeaderSite"
                Cursor="Hand"
                DockPanel.Dock="Top"
                Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource ExpanderTitleHorizontalStyle}" />

              <Border
                x:Name="ExpandSiteBorder"
                BorderBrush="{x:Null}"
                BorderThickness="0,0,0,0"
                DockPanel.Dock="Bottom">

                <ContentPresenter
                  Grid.Row="1"
                  Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                  FlowDirection="{TemplateBinding FlowDirection}" />

              </Border>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />

            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" Value="{DynamicResource ControlFillColorDisabledBrush}" />
              <Setter TargetName="HeaderSite" Property="Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
            </Trigger>

            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ExpandDirection" Value="Down" />
                <Condition Property="IsExpanded" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ExpandSiteBorder" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>

            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ExpandDirection" Value="Right" />
                <Condition Property="IsExpanded" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="HeaderSite" Property="Width" Value="Auto" />
              <Setter TargetName="HeaderSite" Property="Height" Value="21" />

              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Bottom" />
            </MultiTrigger>

            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ExpandDirection" Value="Right" />
                <Condition Property="IsExpanded" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource ExpanderTitleVerticalStyle}" />

              <Setter Property="Height" Value="Auto" />
              <Setter Property="Width" Value="21" />

              <Setter Property="VerticalAlignment" Value="Stretch" />
              <Setter Property="VerticalContentAlignment" Value="Stretch" />

              <Setter TargetName="ExpandSiteBorder" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="ExpandSiteBorder" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>


            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutFloatingWindowControl}}}" Value="True" />
          </ControlTemplate.Triggers>

        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:AnchorableTitle Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <avalonDockControls:LayoutAnchorableControl Model="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion AnchorableExpanderControlStyle-->

  <!--<Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />-->
  <Style x:Key="ExpanderTitleHorizontalStyle" TargetType="{x:Type avalonDockControls:AnchorableTitle}">
    <Setter Property="Height" Value="21" />
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <!--<Setter Property="Model" Value="{Binding Path=Model, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />-->
    <Setter Property="IsChecked" Value="{Binding Path=Model.IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:AnchorableTitle}">
          <Border
            x:Name="Bd"
            Margin="{TemplateBinding Padding}"
            Background="Transparent"
            BorderBrush="Transparent"
            BorderThickness="1">
            <Grid Background="{TemplateBinding Background}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>

              <Grid
                x:Name="ChevronGrid"
                Grid.Column="0"
                Margin="6,0,0,0"
                VerticalAlignment="Center"
                Background="Transparent"
                RenderTransformOrigin="0.5, 0.5">
                <Grid.RenderTransform>
                  <RotateTransform Angle="-90" />
                </Grid.RenderTransform>

                <Path
                  x:Name="ControlChevronIcon"
                  Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"
                  Fill="{TemplateBinding Foreground}"
                  Stretch="Uniform" />
              </Grid>

              <DockPanel
                Grid.Column="1"
                Margin="8,0,0,0"
                FlowDirection="LeftToRight"
                LastChildFill="False">
                <TextBlock
                  VerticalAlignment="Center"
                  DockPanel.Dock="Left"
                  Foreground="{TemplateBinding Foreground}"
                  Text="{Binding Path=Model.Title, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />

                <!--  ItemsSource="{Binding Path=Model.ToolBars, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"  -->
                <ToolBar
                  x:Name="PART_ToolBar"
                  Background="Transparent"
                  DockPanel.Dock="Right"
                  Style="{DynamicResource SimpleToolBar}"
                  Visibility="Collapsed">
                  <Button
                    Width="21"
                    Height="21"
                    Content="1" />
                  <Button
                    Width="21"
                    Height="21"
                    Content="2"
                    Foreground="{TemplateBinding Foreground}" />
                  <Button
                    Width="21"
                    Height="21"
                    Content="3"
                    Foreground="{TemplateBinding Foreground}"
                    ToolBar.OverflowMode="Always" />
                </ToolBar>
              </DockPanel>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Model.IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutAnchorableControl}}}" Value="True" />
                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_ToolBar" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Model.IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutAnchorableControl}}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_ToolBar" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionActiveBackground}}" />
            </MultiDataTrigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="ChevronGrid" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="0" />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderTitleVerticalStyle" TargetType="{x:Type avalonDockControls:AnchorableTitle}">
    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
    <!--<Setter Property="Model" Value="{Binding Path=Model, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />-->
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="IsChecked" Value="{Binding Path=Model.IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:AnchorableTitle}">
          <Border
            x:Name="Bd"
            Margin="{TemplateBinding Padding}"
            Background="Transparent"
            BorderBrush="Transparent"
            BorderThickness="1">
            <DockPanel
              HorizontalAlignment="Center"
              VerticalAlignment="Stretch"
              LastChildFill="True">
              <Grid
                x:Name="ChevronGrid"
                Margin="4,8"
                HorizontalAlignment="Center"
                Background="Transparent"
                DockPanel.Dock="Top"
                RenderTransformOrigin="0.5, 0.5">
                <Grid.RenderTransform>
                  <RotateTransform Angle="-90" />
                </Grid.RenderTransform>
                <Viewbox HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                  <Path
                    x:Name="ControlChevronIcon"
                    Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Uniform" />
                </Viewbox>
              </Grid>

              <DockPanel Margin="0,4,0,0">
                <TextBlock Text="{Binding Path=Model.Title, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="WordEllipsis">
                  <TextBlock.LayoutTransform>
                    <RotateTransform Angle="90" />
                  </TextBlock.LayoutTransform>
                </TextBlock>
                <!--<TextBlock
                  HorizontalAlignment="Right"
                  DockPanel.Dock="Top"
                  Foreground="{TemplateBinding Foreground}"
                  Text="{Binding Path=Model.Title, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
									RenderTransformOrigin="0.5, 0.5"
                  TextTrimming="WordEllipsis">
                  <TextBlock.RenderTransform>
                    <RotateTransform Angle="90" />
                  </TextBlock.RenderTransform>

                </TextBlock>-->

                <!--  ItemsSource="{Binding Path=Model.ToolBars, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"  -->
                <!--<ToolBar
                  x:Name="PART_ToolBar"
                  Background="Transparent"
                  DockPanel.Dock="Bottom"
                  Style="{DynamicResource SimpleToolBar}"
                  Visibility="Collapsed">
                  <Button
                    Width="21"
                    Height="21"
                    Content="1" />
                  <Button
                    Width="21"
                    Height="21"
                    Content="2"
                    Foreground="{TemplateBinding Foreground}" />
                  <Button
                    Width="21"
                    Height="21"
                    Content="3"
                    Foreground="{TemplateBinding Foreground}"
                    ToolBar.OverflowMode="Always" />
                </ToolBar>-->
              </DockPanel>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutAnchorableControl}}}" Value="Right" />
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Model.IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutAnchorableControl}}}" Value="True" />
                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />

              </MultiDataTrigger.Conditions>
              <!--<Setter TargetName="PART_ToolBar" Property="Visibility" Value="Visible" />-->
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Model.IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDockControls:LayoutAnchorableControl}}}" Value="True" />

              </MultiDataTrigger.Conditions>
              <!--<Setter TargetName="PART_ToolBar" Property="Visibility" Value="Visible" />-->
            </MultiDataTrigger>

            <!--<DataTrigger Binding="{Binding Model.ExpandDirection, RelativeSource={RelativeSource TemplatedParent}}" Value="Right">

            -->
            <!--<Setter TargetName="Bd" Property="Margin" Value="-1,0,0,0" />-->
            <!--

            </DataTrigger>-->

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionActiveBackground}}" />
            </MultiDataTrigger>

            <Trigger Property="IsChecked" Value="True">
              <!--<Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation
                      Storyboard.TargetName="ChevronGrid"
                      Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)"
                      To="0"
                      Duration="00:00:00.050" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation
                      Storyboard.TargetName="ChevronGrid"
                      Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)"
                      To="-90"
                      Duration="00:00:00.050" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>-->
              <Setter TargetName="ChevronGrid" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="0" />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style x:Key="{x:Type avalonDockControls:OverlayWindow}" TargetType="{x:Type avalonDockControls:OverlayWindow}">
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:OverlayWindow}">
          <Canvas x:Name="PART_DropTargetsContainer" Opacity="0.9">
            <Path
              x:Name="PART_PreviewBox"
              Fill="Red"
              StrokeThickness="0" />
            <!--  Fill="{DynamicResource {x:Static reskeys:ResourceKeys.DockingButtonStarBackgroundBrushKey}}"  -->

            <!--  Stroke="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"  -->

            <Path
              x:Name="PART_InsertLine"
              Fill="WhiteSmoke"
              StrokeThickness="0" />

            <Grid x:Name="PART_DockingManagerDropTargets">
              <Border
                x:Name="PART_DockingManagerDropTargetLeft"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Background="Blue" />
              <Border
                x:Name="PART_DockingManagerDropTargetRight"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Background="Red" />

              <Border
                x:Name="PART_DockingManagerDropTargetBottom"
                HorizontalAlignment="Center"
                VerticalAlignment="Bottom"
                Background="Green" />

              <Border
                x:Name="PART_DockingManagerDropTargetTop"
                HorizontalAlignment="Center"
                VerticalAlignment="Top"
                Background="Orange" />

            </Grid>

            <Grid x:Name="PART_AnchorablePaneDropTargets">
              <Grid
                Width="112"
                Height="112"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <Border
                  Grid.RowSpan="3"
                  Grid.ColumnSpan="3"
                  Margin="0,0.5,0,-0.5"
                  Background="Red" />

                <Border
                  Name="PART_AnchorablePaneDropTargetTop"
                  Grid.Row="0"
                  Grid.Column="1"
                  Margin="0,3.5,0,0"
                  Background="Red">
                  <!--<Image Source="Images/DockDocumentAsAnchorableTop.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorablePaneDropTargetRight"
                  Grid.Row="1"
                  Grid.Column="2"
                  Margin="2"
                  Background="Red">
                  <!--<Image Source="Images/DockDocumentAsAnchorableRight.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorablePaneDropTargetBottom"
                  Grid.Row="2"
                  Grid.Column="1"
                  Margin="0,-0.5,0,0"
                  Background="Red">
                  <!--<Image Source="Images/DockDocumentAsAnchorableBottom.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorablePaneDropTargetLeft"
                  Grid.Row="1"
                  Grid.Column="0"
                  Margin="2"
                  Background="Red">
                  <!--<Image Source="Images/DockDocumentAsAnchorableLeft.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorablePaneDropTargetInto"
                  Grid.Row="1"
                  Grid.Column="1"
                  Margin="0,0.5,0,0"
                  Background="GreenYellow">

                  <!--<Image Source="Images/DockDocumentInside.png" Stretch="None" />-->
                </Border>
              </Grid>
            </Grid>

            <Grid x:Name="PART_AnchorableExpanderDropTargets">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="1*" />
                  <RowDefinition Height="1*" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="1*" />
                  <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <!--<Image
                       Grid.RowSpan="3"
                       Grid.ColumnSpan="3"
                       Margin="0,0.5,0,-0.5"
                       Source="Images/DockPaneEmpty.png"
                       Stretch="None"
                       Visibility="Collapsed" />-->
                <Border
                  Name="PART_AnchorableExpanderDropTargetTop"
                  Grid.Row="0"
                  Grid.ColumnSpan="2"
                  VerticalAlignment="Stretch">
                  <!--  Background="Blue"  -->
                  <!--<Image Source="Images/DockDocumentAsAnchorableTop.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorableExpanderDropTargetBottom"
                  Grid.Row="1"
                  Grid.ColumnSpan="2"
                  VerticalAlignment="Stretch">
                  <!--  Background="Green"  -->
                  <!--<Image Source="Images/DockDocumentAsAnchorableBottom.png" Stretch="None" />-->
                </Border>

                <Border
                  Name="PART_AnchorableExpanderDropTargetLeft"
                  Grid.RowSpan="2"
                  Grid.Column="0"
                  VerticalAlignment="Stretch">
                  <!--  Background="RosyBrown"  -->
                  <!--<Image Source="Images/DockDocumentAsAnchorableTop.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorableExpanderDropTargetRight"
                  Grid.RowSpan="2"
                  Grid.Column="1"
                  VerticalAlignment="Stretch">
                  <!--  Background="OrangeRed"  -->
                  <!--<Image Source="Images/DockDocumentAsAnchorableBottom.png" Stretch="None" />-->
                </Border>
              </Grid>
            </Grid>

            <Grid x:Name="PART_AnchorableActivityBarDropTargets">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="1*" />
                  <RowDefinition Height="1*" />
                </Grid.RowDefinitions>

                <Border
                  Name="PART_AnchorableActivityBarDropTargetTop"
                  Grid.Row="0"
                  Margin="0"
                  VerticalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableTop.png" Stretch="None" />-->
                </Border>
                <Border
                  Name="PART_AnchorableActivityBarDropTargetBottom"
                  Grid.Row="1"
                  Margin="0"
                  VerticalAlignment="Stretch"
                  Background="Transparent">
                  <!--<Image Source="Images/DockDocumentAsAnchorableBottom.png" Stretch="None" />-->
                </Border>

              </Grid>
            </Grid>

            <Grid x:Name="PART_AnchorableItemDropTargets">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
              </Grid.ColumnDefinitions>

              <Border
                Name="PART_AnchorableItemDropTargetLeft"
                Grid.Column="0"
                Margin="0"
                HorizontalAlignment="Stretch"
                Background="Transparent" />
              <Border
                Name="PART_AnchorableItemDropTargetRight"
                Grid.Column="1"
                Margin="0"
                HorizontalAlignment="Stretch"
                Background="Transparent">
                <!--<Image Source="Images/DockDocumentAsAnchorableRight.png" Stretch="None" />-->
              </Border>
            </Grid>

            <Grid x:Name="PART_DocumentPaneDropTargets">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="3*" />
                <ColumnDefinition Width="1*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="1*" />
                <RowDefinition Height="3*" />
                <RowDefinition Height="1*" />
              </Grid.RowDefinitions>
              <Border
                Name="PART_DocumentPaneDropTargetTop"
                Grid.Row="0"
                Grid.Column="1"
                Margin="0" />
              <!--  Background="Blue"  -->
              <Border
                Name="PART_DocumentPaneDropTargetRight"
                Grid.Row="0"
                Grid.RowSpan="3"
                Grid.Column="2"
                Margin="0" />
              <!--  Background="BlueViolet"  -->
              <Border
                Name="PART_DocumentPaneDropTargetBottom"
                Grid.Row="2"
                Grid.Column="1"
                Margin="0" />
              <!--  Background="YellowGreen"  -->
              <Border
                Name="PART_DocumentPaneDropTargetLeft"
                Grid.Row="0"
                Grid.RowSpan="3"
                Grid.Column="0"
                Margin="0" />
              <!--  Background="Green"  -->
              <Border
                Name="PART_DocumentPaneDropTargetInto"
                Grid.Row="1"
                Grid.Column="1" />
              <!--  Background="Yellow"  -->
            </Grid>

            <Grid x:Name="PART_DocumentPaneFullDropTargets">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="3*" />
                <ColumnDefinition Width="1*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="1*" />
                <RowDefinition Height="3*" />
                <RowDefinition Height="1*" />
              </Grid.RowDefinitions>
              <Border
                Name="PART_DocumentPaneFullDropTargetTop"
                Grid.Row="0"
                Grid.Column="1"
                BorderThickness="0">
                <!--  Background="BlueViolet"  -->

                <TextBlock
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  FontSize="6"
                  Text="PART_DocumentPaneFullDropTargetTop" />
              </Border>
              <Border
                Name="PART_DocumentPaneFullDropTargetRight"
                Grid.Row="0"
                Grid.RowSpan="3"
                Grid.Column="2">
                <!--  Background="Green"  -->
                <TextBlock
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  FontSize="6"
                  Text="PART_DocumentPaneFullDropTargetRight" />
              </Border>
              <Border
                Name="PART_DocumentPaneFullDropTargetBottom"
                Grid.Row="2"
                Grid.Column="1">
                <!--  Background="GreenYellow"  -->
                <TextBlock
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  FontSize="6"
                  Text="PART_DocumentPaneFullDropTargetBottom" />
              </Border>
              <Border
                Name="PART_DocumentPaneFullDropTargetLeft"
                Grid.Row="0"
                Grid.RowSpan="3"
                Grid.Column="0">
                <!--  Background="Orange"  -->
                <TextBlock
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  FontSize="6"
                  Text="PART_DocumentPaneFullDropTargetLeft" />
              </Border>
              <Border
                Name="PART_DocumentPaneFullDropTargetInto"
                Grid.Row="1"
                Grid.Column="1">
                <!--  Background="PaleVioletRed"  -->
                <TextBlock
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  FontSize="6"
                  Text="PART_DocumentPaneFullDropTargetInto" />
              </Border>
            </Grid>
          </Canvas>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate x:Key="DocumentHeaderTemplate">
    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
  </DataTemplate>

  <!--#region  Anchorable Tab 内的标题样式-->
  <DataTemplate x:Key="AnchorableHeaderTemplate">
    <Grid>
      <Grid Margin="4,2">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <!--<Image
          x:Name="icon"
          Source="{Binding IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}"
          Stretch="Uniform" />-->
        <TextBlock
          x:Name="title"
          Grid.Column="1"
          Margin="0,0,0,0"
          Text="{Binding Title}"
          TextTrimming="CharacterEllipsis" />
      </Grid>
    </Grid>
    <!--<DataTemplate.Triggers>
      <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
        <Setter TargetName="title" Property="Margin" Value="0" />
      </DataTrigger>
    </DataTemplate.Triggers>-->
  </DataTemplate>
  <!--#endregion-->

  <DataTemplate x:Key="ActiviyItemTemplate">
    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
  </DataTemplate>

  <DataTemplate x:Key="DocumentTitleTemplate">
    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
  </DataTemplate>

  <!--#region  Anchorable 顶部的标题样式-->
  <DataTemplate x:Key="AnchorableTitleTemplate">
    <TextBlock
      VerticalAlignment="Center"
      Background="Transparent"
      Text="{Binding Title}"
      TextTrimming="CharacterEllipsis" />
  </DataTemplate>

  <DataTemplate x:Key="IconContentTemplate">
    <!--<Image Source="{Binding IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="Uniform" />-->
    <TextBlock Text="IconContentTemplate" />
  </DataTemplate>

  <!--#region  下拉菜单-->
  <ContextMenu x:Key="AnchorableContextMenu">
    <MenuItem Command="{Binding Path=FloatCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Float}" />
    <MenuItem Command="{Binding Path=DockCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Dock}" />
    <MenuItem Command="{Binding Path=DockAsDocumentCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_DockAsDocument}" />
    <MenuItem Command="{Binding Path=AutoHideCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_AutoHide}" />
    <MenuItem
      Command="{Binding Path=CloseCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_Close}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
    <MenuItem Command="{Binding Path=HideCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Hide}">
      <MenuItem.Visibility>
        <MultiBinding Converter="{avalonDockConverters:AnchorableContextMenuHideVisibilityConverter}">
          <Binding
            Converter="{avalonDockConverters:BoolToVisibilityConverter}"
            Mode="OneWay"
            Path="IsEnabled"
            RelativeSource="{RelativeSource Self}" />
          <Binding Path="CanClose" />
        </MultiBinding>
      </MenuItem.Visibility>
    </MenuItem>
  </ContextMenu>

  <ContextMenu x:Key="DocumentContextMenu">
    <MenuItem
      Command="{Binding Path=CloseCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_Close}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
    <MenuItem Command="{Binding Path=CloseAllButThisCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAllButThis}" />
    <MenuItem Command="{Binding Path=CloseAllCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAll}" />
    <MenuItem Command="{Binding Path=FloatCommand}" Header="{x:Static avalonDockProperties:Resources.Document_Float}" />
    <MenuItem Command="{Binding Path=DockAsDocumentCommand}" Header="{x:Static avalonDockProperties:Resources.Document_DockAsDocument}" />
    <MenuItem
      Command="{Binding Path=NewHorizontalTabGroupCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_NewHorizontalTabGroup}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
      <!--<MenuItem.Icon>
        <Image
          Width="14"
          Source="Images/HTabGroup.png"
          Stretch="Uniform" />
      </MenuItem.Icon>-->

    </MenuItem>

    <MenuItem
      Command="{Binding Path=NewVerticalTabGroupCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_NewVerticalTabGroup}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
      <!--<MenuItem.Icon>
        <Image
          Width="14"
          Source="Images/VTabGroup.png"
          Stretch="Uniform" />
      </MenuItem.Icon>-->
    </MenuItem>
    <MenuItem
      Command="{Binding Path=MoveToNextTabGroupCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_MoveToNextTabGroup}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
    <MenuItem
      Command="{Binding Path=MoveToPreviousTabGroupCommand}"
      Header="{x:Static avalonDockProperties:Resources.Document_MoveToPreviousTabGroup}"
      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
  </ContextMenu>
  <!--#region-->

  <!--#region  LayoutGridResizerControl-->
  <!--<Style x:Key="{x:Type avalonDockControls:LayoutGridResizerControl}" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
   <Setter Property="Background" Value="Transparent" />
   <Setter Property="Template">
     <Setter.Value>
       <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
         <Border Background="{DynamicResource {x:Static reskeys:ResourceKeys.GridResizerBackground}}" />
       </ControlTemplate>
     </Setter.Value>
   </Setter>
 </Style>-->
  <!--  x:Name="GridSplitterHorizontalStyle"  -->
  <!--<Style x:Key="ActivityBarControlStyle" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">-->

  <Style x:Key="GridSplitterHorizontalStyle" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
    <Setter Property="Panel.ZIndex" Value="1" />
    <Setter Property="Margin" Value="0,-1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
          <!--<Border Background="{DynamicResource {x:Static reskeys:ResourceKeys.GridResizerBackground}}" />-->
          <Border Background="Transparent">
            <Border Margin="0,1" Background="{DynamicResource {x:Static reskeys:ResourceKeys.GridResizerBackground}}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="GridSplitterVerticalStyle" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
    <Setter Property="Panel.ZIndex" Value="1" />
    <Setter Property="Margin" Value="-1,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
          <!--<Border Background="{DynamicResource {x:Static reskeys:ResourceKeys.GridResizerBackground}}" />-->
          <Border Background="Transparent">
            <Border Margin="1,0" Background="{DynamicResource {x:Static reskeys:ResourceKeys.GridResizerBackground}}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--#region  DockingManager-->
  <Style x:Key="{x:Type avalonDock:DockingManager}" TargetType="{x:Type avalonDock:DockingManager}">
    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.Background}}" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DockingButtonForegroundArrowBrushKey}}" />
    <Setter Property="DocumentPaneControlStyle" Value="{StaticResource DocumentPaneControlStyle}" />
    <!--<Setter Property="AnchorablePaneControlStyle" Value="{StaticResource AnchorablePaneControlStyle}" />-->
    <Setter Property="AnchorableExpanderPaneControlStyle" Value="{StaticResource AnchorableExpanderControlStyle}" />
    <Setter Property="PrimarySideBarStyle" Value="{StaticResource PrimarySideBarStyle}" />
    <Setter Property="SecondarySideBarStyle" Value="{StaticResource SecondarySideBarStyle}" />
    <Setter Property="PanelStyle" Value="{StaticResource PanelStyle}" />
    <Setter Property="ActivityBarControlStyle" Value="{StaticResource ActivityBarControlStyle}" />
    <!--<Setter Property="ActivityBarTemplate" Value="{StaticResource ActivityBarTemplate}" />-->

    <Setter Property="DocumentHeaderTemplate" Value="{StaticResource DocumentHeaderTemplate}" />
    <Setter Property="AnchorableHeaderTemplate" Value="{StaticResource AnchorableHeaderTemplate}" />
    <Setter Property="DocumentTitleTemplate" Value="{StaticResource DocumentTitleTemplate}" />
    <Setter Property="AnchorableTitleTemplate" Value="{StaticResource AnchorableTitleTemplate}" />
    <Setter Property="AnchorableContextMenu" Value="{StaticResource AnchorableContextMenu}" />
    <Setter Property="DocumentContextMenu" Value="{StaticResource DocumentContextMenu}" />
    <Setter Property="DocumentPaneMenuItemHeaderTemplate" Value="{StaticResource DocumentHeaderTemplate}" />
    <Setter Property="IconContentTemplate" Value="{StaticResource IconContentTemplate}" />
    <Setter Property="GridSplitterWidth" Value="1" />
    <Setter Property="GridSplitterHeight" Value="1" />
    <Setter Property="GridSplitterHorizontalStyle" Value="{StaticResource GridSplitterHorizontalStyle}" />
    <Setter Property="GridSplitterVerticalStyle" Value="{StaticResource GridSplitterVerticalStyle}" />
    <!--  <Setter Property="GridSplitterHorizontalStyle"  -->
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDock:DockingManager}">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="1" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter
                Grid.Row="1"
                Grid.Column="0"
                Content="{TemplateBinding ActivityBar}" />
              <Border
                Grid.Row="1"
                Grid.Column="1"
                Width="1"
                VerticalAlignment="Stretch"
                Background="{DynamicResource {x:Static reskeys:ResourceKeys.GridResizerBackground}}" />
              <ContentPresenter
                Grid.Row="1"
                Grid.Column="2"
                Content="{TemplateBinding LayoutRootPanel}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <Style TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
          <!--  Background="{TemplateBinding Background}"  -->

          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter
              Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
              ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
              ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
          <avalonDockControls:DropDownControlArea
            DropDownContextMenu="{Binding Root.Manager.DocumentContextMenu}"
            DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
            Style="{DynamicResource DropDownControlArea}">
            <Border
              x:Name="Header"
              Height="19"
              Margin="0,0,0,2"
              Padding="1,0"
              Background="{TemplateBinding Background}"
              BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.Background}}"
              BorderThickness="0,0,0,1">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="2" Background="Transparent" />
                <ContentPresenter
                  Margin="4,0,4,1"
                  VerticalAlignment="Bottom"
                  Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{Binding DocumentHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                  ContentTemplateSelector="{Binding DocumentHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                  TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabItem}}" />
                <!--  Close button should be moved out to the container style  -->
                <Button
                  x:Name="DocumentCloseButton"
                  Grid.Column="1"
                  Width="15"
                  Height="15"
                  Margin="3,0"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Bottom"
                  Command="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
                  Style="{StaticResource ButtonStyle}"
                  ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
                  Visibility="Hidden">
                  <Path
                    x:Name="PART_ImgPinClose"
                    Width="10"
                    Height="10"
                    Margin="1,0,0,1"
                    VerticalAlignment="Center"
                    Data="{DynamicResource PinClose}"
                    Fill="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionActiveText}}"
                    Stretch="Uniform" />
                </Button>
              </Grid>
            </Border>
          </avalonDockControls:DropDownControlArea>
          <ControlTemplate.Triggers>
            <!--  Close button visibility  -->
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="true">
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsLastFocusedDocument}" Value="true">
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsActive}" Value="true">
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <!--  BD: 17.08.2020 use HideCommand if CanClose=false but CanHide=true  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=CanClose}" Value="false" />
                <Condition Binding="{Binding Path=CanHide}" Value="true" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="DocumentCloseButton" Property="Command" Value="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="DocumentCloseButton" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Anchorable_Hide}" />
            </MultiDataTrigger>
            <!--  BD: 17.08.2020 hide button if both CanClose=false and CanHide=false  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=CanClose}" Value="false" />
                <Condition Binding="{Binding Path=CanHide}" Value="false" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Selected, inactive  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsLastFocusedDocument}" Value="true" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="BorderThickness" Value="0" />
              <Setter TargetName="Header" Property="Padding" Value="0" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Selected, inactive, hovered  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsLastFocusedDocument}" Value="true" />
                <Condition Binding="{Binding IsMouseOver, ElementName=DocumentCloseButton}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="BorderThickness" Value="0" />
              <Setter TargetName="Header" Property="Padding" Value="0" />
              <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
              <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Selected, inactive, pressed  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsLastFocusedDocument}" Value="true" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=DocumentCloseButton}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="BorderThickness" Value="0" />
              <Setter TargetName="Header" Property="Padding" Value="0" />
              <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Selected, active  -->
            <DataTrigger Binding="{Binding IsActive}" Value="true">
              <Setter TargetName="Header" Property="BorderThickness" Value="0" />
              <Setter TargetName="Header" Property="Padding" Value="0" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
            </DataTrigger>

            <!--  Document Well : Tab : Button / Selected, active, hovered  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseOver, ElementName=DocumentCloseButton}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="BorderThickness" Value="0" />
              <Setter TargetName="Header" Property="Padding" Value="0" />
              <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBackground}}" />
              <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Selected, active, pressed  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=DocumentCloseButton}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="BorderThickness" Value="0" />
              <Setter TargetName="Header" Property="Padding" Value="0" />
              <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
              <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Unselected, tab hovered  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsActive}" Value="False" />
                <Condition Binding="{Binding IsLastFocusedDocument}" Value="False" />
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Unselected, tab hovered, button hovered  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsActive}" Value="False" />
                <Condition Binding="{Binding IsLastFocusedDocument}" Value="False" />
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding IsMouseOver, ElementName=DocumentCloseButton}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonHoveredBackground}}" />
              <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonHoveredGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Unselected, tab hovered, button pressed  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsActive}" Value="False" />
                <Condition Binding="{Binding IsLastFocusedDocument}" Value="False" />
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=DocumentCloseButton}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonPressedBackground}}" />
              <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonPressedBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonPressedGlyph}}" />
            </MultiDataTrigger>

            <!--  Mulitple Document Well : Tab : Button / Selected, tab hovered, button pressed  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsActive}" Value="False" />
                <Condition Binding="{Binding Path=IsSelected}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="BorderThickness" Value="0" />
              <Setter TargetName="Header" Property="Padding" Value="0" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
            </MultiDataTrigger>

            <!--  Mulitple Document Well : Tab : Button / Selected, inactive, hovered  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsActive}" Value="False" />
                <Condition Binding="{Binding Path=IsSelected}" Value="True" />
                <Condition Binding="{Binding IsMouseOver, ElementName=DocumentCloseButton}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="BorderThickness" Value="0" />
              <Setter TargetName="Header" Property="Padding" Value="0" />
              <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
              <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
            </MultiDataTrigger>

            <!--  Mulitple Document Well : Tab : Button / Selected, inactive, pressed  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsActive}" Value="False" />
                <Condition Binding="{Binding Path=IsSelected}" Value="True" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=DocumentCloseButton}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Header" Property="BorderThickness" Value="0" />
              <Setter TargetName="Header" Property="Padding" Value="0" />
              <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupTabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableGroupTabItem}">
          <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
            <Border
              Margin="6,1,6,3"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

              <Grid>
                <ContentPresenter
                  Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                  ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />
                <avalonDockControls:DropDownControlArea
                  Grid.Column="0"
                  DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                  DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
            </Border>
          </avalonDockControls:DropDownControlArea>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type avalonDockControls:LayoutActivityTabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutActivityTabItem}">
          <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
            <Border
              Background="Transparent"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
              <Grid>
                <ContentPresenter
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                  ContentTemplate="{DynamicResource ActiviyItemTemplate}" />
                <avalonDockControls:DropDownControlArea
                  Grid.Column="0"
                  DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                  DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
            </Border>
          </avalonDockControls:DropDownControlArea>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingDocumentWindowBackground}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingDocumentWindowBorder}}" />
    <Setter Property="shell:WindowChrome.WindowChrome">
      <Setter.Value>
        <shell:WindowChrome
          CaptionHeight="32"
          CornerRadius="0"
          GlassFrameThickness="0"
          ResizeBorderThickness="10"
          ShowSystemMenu="False" />
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
          <Grid>
            <Border
              x:Name="WindowBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="1">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" MinHeight="32" />
                  <!--  https://github.com/xceedsoftware/wpftoolkit/issues/1203  -->
                  <RowDefinition x:Name="MaximizedAddBorder" Height="0" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Border
                  x:Name="Header"
                  Padding="0,0,0,0"
                  Background="Transparent"
                  TextElement.Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedInactiveText}}">
                  <Grid UseLayoutRounding="True">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter
                      x:Name="HeaderContent"
                      Margin="12,4,12,0"
                      Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
                      ContentTemplate="{Binding Model.Root.Manager.DocumentTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                      ContentTemplateSelector="{Binding Model.Root.Manager.DocumentTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                      TextElement.Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedInactiveText}}" />

                    <Button
                      x:Name="PART_PinMaximize"
                      Grid.Column="1"
                      Width="34"
                      Height="26"
                      VerticalAlignment="Top"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                      Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
                      <Path
                        x:Name="PART_ImgPinMaximize"
                        Width="9"
                        Height="9"
                        VerticalAlignment="Center"
                        Data="{DynamicResource PinMaximize}"
                        Fill="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveGlyph}}"
                        RenderOptions.EdgeMode="Aliased"
                        Stretch="Uniform" />
                    </Button>

                    <Button
                      x:Name="PART_PinRestore"
                      Grid.Column="1"
                      Width="34"
                      Height="26"
                      VerticalAlignment="Top"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                      Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Path
                        x:Name="PART_ImgPinRestore"
                        Width="10"
                        Height="10"
                        VerticalAlignment="Center"
                        Data="{DynamicResource PinRestore}"
                        Fill="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveGlyph}}"
                        Stretch="Uniform" />
                    </Button>

                    <Button
                      x:Name="PART_PinClose"
                      Grid.Column="2"
                      Width="34"
                      Height="26"
                      VerticalAlignment="Top"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{Binding Path=CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Path
                        x:Name="PART_ImgPinClose"
                        Width="10"
                        Height="10"
                        VerticalAlignment="Center"
                        Data="{DynamicResource PinClose}"
                        Fill="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveGlyph}}"
                        Stretch="Uniform" />
                    </Button>
                  </Grid>
                </Border>
                <ContentPresenter
                  Grid.Row="2"
                  Margin="6"
                  Content="{TemplateBinding Content}" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <!--  Show Header Bar (Window Title and Restore/Maximize/Minimize buttons with highlighting color if this IsActive)  -->
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="WindowBorder" Property="Padding" Value="7" />
              <Setter TargetName="MaximizedAddBorder" Property="Height" Value="4" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="True">
              <!--<Setter TargetName="Header" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedActiveBackground}}" />-->
              <Setter TargetName="Header" Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedActiveText}}" />
            </DataTrigger>

            <!--  In VS DocumentFloatingWindow colors change only for header text and icon if window is inactive  -->
            <!--  Document Well : Tab : Button / Selected, inactive, hovered  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinMaximize}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinMaximize" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
              <Setter TargetName="PART_PinMaximize" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinRestore}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinRestore" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
              <Setter TargetName="PART_PinRestore" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinClose}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinClose" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
              <Setter TargetName="PART_PinClose" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Selected, inactive, pressed  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinMaximize}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinMaximize" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="PART_PinMaximize" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinRestore}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinRestore" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="PART_PinRestore" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinClose}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinClose" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="PART_PinClose" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>

            <!--  Mark Active Document on CLick in Document Well : Tab : Button / Selected, active  -->
            <!--
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="true">
						<Setter TargetName="PART_ImgPinMenu" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
						<Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
						<Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
                        <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
                    </DataTrigger>-->

            <!--  Document Well : Tab : Button / Selected, active, hovered  -->
            <!--  Highlight Maximize Button of Floating Window on MouseOver  -->
            <!--<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="true" />
							<Condition Binding="{Binding IsMouseOver, ElementName=PART_PinMaximize}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter TargetName="PART_PinMaximize" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBackground}}" />
						<Setter TargetName="PART_PinMaximize" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBorder}}" />
						<Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredGlyph}}" />
					</MultiDataTrigger>-->

            <!--  Highlight Restore Button of Floating Window on MouseOver  -->
            <!--<MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="true" />
                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinRestore}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_PinRestore" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBackground}}" />
                        <Setter TargetName="PART_PinRestore" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBorder}}" />
						<Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredGlyph}}" />
                    </MultiDataTrigger>-->

            <!--  Highlight Close Button of Floating Window on MouseOver  -->
            <!--<MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="true" />
                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinClose}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_PinClose" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBackground}}" />
                        <Setter TargetName="PART_PinClose" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBorder}}" />
                        <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredGlyph}}" />
                    </MultiDataTrigger>-->

            <!--  Document Well : Tab : Button / Selected, active, pressed  -->
            <!--  Highlight Maximize Button of Floating Window on MouseClick and Holding Bottun (even when Mouse is moved away)  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinMaximize}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinMaximize" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
              <Setter TargetName="PART_PinMaximize" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
            </MultiDataTrigger>

            <!--  Highlight Restore Button of Floating Window on MouseClick and Holding Bottun (even when Mouse is moved away)  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinRestore}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinRestore" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
              <Setter TargetName="PART_PinRestore" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
            </MultiDataTrigger>

            <!--  Highlight Close Button of Floating Window on MouseClick and Holding Bottun (even when Mouse is moved away)  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinClose}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinClose" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
              <Setter TargetName="PART_PinClose" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingToolWindowBackground}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingToolWindowBorder}}" />
    <!--<Setter Property="OverridesDefaultStyle" Value="True" />-->
    <!--<Setter Property="ResizeMode" Value="CanMinimize" />
    <Setter Property="WindowStyle" Value="None" />-->
    <Setter Property="shell:WindowChrome.WindowChrome">
      <Setter.Value>
        <shell:WindowChrome
          CaptionHeight="21"
          CornerRadius="3"
          GlassFrameThickness="0"
          ResizeBorderThickness="3" />
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
          <Grid>
            <Border
              x:Name="WindowBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="1">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" MinHeight="21" />
                  <!--  https://github.com/xceedsoftware/wpftoolkit/issues/1203  -->
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Border
                  x:Name="Header"
                  Padding="2,2,3,3"
                  Background="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionInactiveBackground}}"
                  TextElement.Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionInactiveText}}">
                  <Grid UseLayoutRounding="True">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Rectangle
                      x:Name="DragHandleGeometryPlaceholder"
                      Fill="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionInactiveGrip}}"
                      Visibility="Collapsed" />

                    <DockPanel>
                      <Border
                        Padding="2,0,4,0"
                        HorizontalAlignment="Left"
                        Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                        <avalonDockControls:DropDownControlArea
                          DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                          DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{DynamicResource DropDownControlArea}">
                          <ContentPresenter
                            Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
                            ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                            ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
                        </avalonDockControls:DropDownControlArea>
                      </Border>

                    </DockPanel>

                    <avalonDockControls:DropDownButton
                      x:Name="SinglePaneContextMenu"
                      Grid.Column="1"
                      Width="15"
                      Height="15"
                      Margin="1,1,1,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                      DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource ToolBarOverflowToggleButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}"
                      Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Path
                        x:Name="PART_ImgPinMenu"
                        Width="8"
                        Height="8"
                        Margin="0,0,0,1"
                        Data="{DynamicResource PinMenu}"
                        Fill="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveGlyph}}"
                        Stretch="Uniform" />
                    </avalonDockControls:DropDownButton>

                    <Button
                      x:Name="PART_PinMaximize"
                      Grid.Column="2"
                      Width="15"
                      Height="15"
                      Margin="0,1,1,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                      Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
                      <Path
                        x:Name="PART_ImgPinMaximize"
                        Width="9"
                        Height="9"
                        VerticalAlignment="Center"
                        Data="{DynamicResource PinMaximize}"
                        Fill="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveGlyph}}"
                        Stretch="Uniform" />
                    </Button>

                    <Button
                      x:Name="PART_PinRestore"
                      Grid.Column="2"
                      Width="15"
                      Height="15"
                      Margin="0,1,1,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                      Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Path
                        x:Name="PART_ImgPinRestore"
                        Width="10"
                        Height="10"
                        Margin="1,1,0,0"
                        VerticalAlignment="Center"
                        Data="{DynamicResource PinRestore}"
                        Fill="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveGlyph}}"
                        Stretch="Uniform" />
                    </Button>
                    <Button
                      x:Name="PART_PinClose"
                      Grid.Column="3"
                      Width="15"
                      Height="15"
                      Margin="0,1,1,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      shell:WindowChrome.IsHitTestVisibleInChrome="True"
                      Command="{Binding HideWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                      Focusable="False"
                      Style="{StaticResource ButtonStyle}"
                      ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                      <Path
                        x:Name="PART_ImgPinClose"
                        Width="10"
                        Height="10"
                        Margin="1,0,0,1"
                        VerticalAlignment="Center"
                        Data="{DynamicResource PinClose}"
                        Fill="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveGlyph}}"
                        Stretch="Uniform" />
                    </Button>
                  </Grid>
                </Border>

                <ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="WindowBorder" Property="Padding" Value="8" />
              <Setter TargetName="WindowBorder" Property="BorderThickness" Value="0" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="True">
              <Setter TargetName="Header" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionActiveBackground}}" />
              <Setter TargetName="Header" Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionActiveText}}" />
              <Setter TargetName="DragHandleGeometryPlaceholder" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionActiveGrip}}" />
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding Model.SinglePane.SelectedContent.CanClose, RelativeSource={RelativeSource Mode=Self}}" Value="True">
              <Setter TargetName="PART_PinClose" Property="Command" Value="{Binding CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="PART_PinClose" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Document_Close}" />
            </DataTrigger>-->
            <!--  Document Well : Tab : Button / Selected, inactive, hovered  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, ElementName=SinglePaneContextMenu}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="SinglePaneContextMenu" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
              <Setter TargetName="SinglePaneContextMenu" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinMenu" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinMaximize}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinMaximize" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
              <Setter TargetName="PART_PinMaximize" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinRestore}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinRestore" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
              <Setter TargetName="PART_PinRestore" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinClose}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinClose" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
              <Setter TargetName="PART_PinClose" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Selected, inactive, pressed  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseCaptured, ElementName=SinglePaneContextMenu}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="SinglePaneContextMenu" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="SinglePaneContextMenu" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinMenu" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, ElementName=SinglePaneContextMenu}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="SinglePaneContextMenu" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="SinglePaneContextMenu" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinMenu" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinMaximize}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinMaximize" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="PART_PinMaximize" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinRestore}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinRestore" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="PART_PinRestore" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinClose}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinClose" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
              <Setter TargetName="PART_PinClose" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Selected, active  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true">
              <Setter TargetName="PART_ImgPinMenu" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
              <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
              <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
            </DataTrigger>

            <!--  Document Well : Tab : Button / Selected, active, hovered  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseOver, ElementName=SinglePaneContextMenu}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="SinglePaneContextMenu" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBackground}}" />
              <Setter TargetName="SinglePaneContextMenu" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinMenu" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinMaximize}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinMaximize" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBackground}}" />
              <Setter TargetName="PART_PinMaximize" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinRestore}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinRestore" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBackground}}" />
              <Setter TargetName="PART_PinRestore" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseOver, ElementName=PART_PinClose}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinClose" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBackground}}" />
              <Setter TargetName="PART_PinClose" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredGlyph}}" />
            </MultiDataTrigger>

            <!--  Document Well : Tab : Button / Selected, active, pressed  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=SinglePaneContextMenu}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="SinglePaneContextMenu" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
              <Setter TargetName="SinglePaneContextMenu" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinMenu" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                <Condition Binding="{Binding IsChecked, ElementName=SinglePaneContextMenu}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="SinglePaneContextMenu" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
              <Setter TargetName="SinglePaneContextMenu" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinMenu" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinMaximize}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinMaximize" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
              <Setter TargetName="PART_PinMaximize" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinRestore}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinRestore" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
              <Setter TargetName="PART_PinRestore" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                <Condition Binding="{Binding IsMouseCaptured, ElementName=PART_PinClose}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_PinClose" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
              <Setter TargetName="PART_PinClose" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
              <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
            </MultiDataTrigger>

            <Trigger Property="IsDragging" Value="True">
              <!--<Setter Property="ResizeMode" Value="NoResize" />
              <Setter Property="shell:WindowChrome.GlassFrameThickness" Value="-1" />-->
              <Setter Property="Opacity" Value="0.5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

  </Style>

  <Style x:Key="NavigatorWindowListBoxItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle
            RadiusX="2"
            RadiusY="2"
            Stroke="{DynamicResource {x:Static reskeys:ResourceKeys.PanelBorderBrush}}"
            StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="NavigatorWindowListBoxItemStyle" TargetType="ListBoxItem">
    <Setter Property="FocusVisualStyle" Value="{StaticResource NavigatorWindowListBoxItemFocusVisual}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.NavigatorWindowForeground}}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="5,0,5,0" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="AutomationProperties.Name" Value="{Binding LayoutElement.Title}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="true">
            <Border x:Name="InnerBorder" BorderThickness="1">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition MaxHeight="11" />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <Rectangle
                  x:Name="UpperHighlight"
                  Fill="#75FFFFFF"
                  Visibility="Collapsed" />
                <ContentPresenter
                  Grid.RowSpan="2"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </Grid>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <!--<Trigger Property="IsMouseOver" Value="true">
                         <Setter Property="Background" Value="{StaticResource AvalonDockThemeVs2013NavigatorWindowListBoxItemSelectedFill}" />
                         <Setter Property="BorderBrush" Value="#FF98DDFB" />
                         <Setter TargetName="InnerBorder" Property="BorderBrush" Value="#80FFFFFF" />
                         <Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />
                         <Setter TargetName="UpperHighlight" Property="Fill" Value="#40FFFFFF" />
                     </Trigger>-->
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.NavigatorWindowSelectedBackground}}" />
              <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.NavigatorWindowSelectedText}}" />
              <!--<Setter Property="BorderBrush" Value="#FF98DDFB" />-->
              <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="#80FFFFFF" />-->
              <!--<Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />
                         <Setter TargetName="UpperHighlight" Property="Fill" Value="#40FFFFFF" />-->
            </Trigger>
            <!--
                         <MultiTrigger>
                         <MultiTrigger.Conditions>
                         <Condition Property="IsSelected" Value="true"/>
                         <Condition Property="IsMouseOver" Value="true"/>
                         </MultiTrigger.Conditions>
                         <Setter Property="Background" Value="{StaticResource AvalonDock_ThemeMetro_NavigatorWindowListBoxItemSelectedHoverFill}"/>
                         <Setter Property="BorderBrush" Value="#FF98DDFB"/>
                         </MultiTrigger>
					-->
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type avalonDockControls:NavigatorWindow}" TargetType="{x:Type avalonDockControls:NavigatorWindow}">
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
    <Setter Property="SizeToContent" Value="WidthAndHeight" />
    <Setter Property="ResizeMode" Value="NoResize" />
    <!--<Setter Property="shell:WindowChrome.WindowChrome">
         <Setter.Value>
             <shell:WindowChrome CaptionHeight="16"
                                 GlassFrameThickness="4"
                                 ResizeBorderThickness="10" />
         </Setter.Value>
     </Setter>-->
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:NavigatorWindow}">
          <Grid>
            <Border
              x:Name="WindowBorder"
              Background="{DynamicResource {x:Static reskeys:ResourceKeys.NavigatorWindowBackground}}"
              BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.PanelBorderBrush}}"
              BorderThickness="1">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="54" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <Grid Margin="5">
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <!--<Image
                      Source="{Binding SelectedDocument.LayoutElement.IconSource, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:NullToDoNothingConverter}}"
                      Stretch="None"
                      Visibility="{Binding SelectedDocument.LayoutElement.IconSource, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />-->
                    <TextBlock
                      x:Name="selectedElementTitle"
                      Grid.Column="1"
                      Margin="4,0,0,0"
                      VerticalAlignment="Center"
                      FontWeight="Bold"
                      Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.NavigatorWindowForeground}}"
                      Text="{Binding SelectedDocument.LayoutElement.Title, RelativeSource={RelativeSource TemplatedParent}}"
                      TextTrimming="CharacterEllipsis" />
                  </Grid>
                  <TextBlock
                    x:Name="selectedElementDescription"
                    VerticalAlignment="Center"
                    Text="{Binding SelectedDocument.LayoutElement.Description}"
                    TextTrimming="CharacterEllipsis" />
                </Grid>

                <Border
                  Grid.Row="1"
                  MinHeight="200"
                  Background="{DynamicResource {x:Static reskeys:ResourceKeys.NavigatorWindowBackground}}"
                  BorderBrush="Transparent"
                  BorderThickness="0,1,0,0">
                  <Grid Margin="5">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid Margin="5">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                      </Grid.RowDefinitions>
                      <TextBlock
                        Margin="0,3,0,4"
                        FontWeight="Bold"
                        Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.NavigatorWindowForeground}}"
                        Text="{x:Static avalonDockProperties:Resources.Active_ToolWindows}" />
                      <ListBox
                        x:Name="PART_AnchorableListBox"
                        Grid.Row="1"
                        MaxHeight="400"
                        AutomationProperties.Name="{x:Static avalonDockProperties:Resources.Active_ToolWindows}"
                        Background="Transparent"
                        ItemContainerStyle="{StaticResource NavigatorWindowListBoxItemStyle}"
                        ItemsSource="{Binding Anchorables}"
                        SelectedItem="{Binding SelectedAnchorable, Mode=TwoWay}">
                        <ListBox.ItemTemplate>
                          <DataTemplate>
                            <Grid>
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16" />
                                <ColumnDefinition Width="150" />
                              </Grid.ColumnDefinitions>
                              <!--<Image Source="{Binding LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />-->
                              <TextBlock
                                Grid.Column="1"
                                Margin="4,0,0,0"
                                Text="{Binding LayoutElement.Title}"
                                TextTrimming="CharacterEllipsis" />
                            </Grid>
                          </DataTemplate>
                        </ListBox.ItemTemplate>
                      </ListBox>
                    </Grid>
                    <Grid Grid.Column="1" Margin="5">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                      </Grid.RowDefinitions>
                      <TextBlock
                        Margin="0,3,0,4"
                        FontWeight="Bold"
                        Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.NavigatorWindowForeground}}"
                        Text="{x:Static avalonDockProperties:Resources.Active_Files}" />

                      <ListBox
                        x:Name="PART_DocumentListBox"
                        Grid.Row="1"
                        MaxHeight="400"
                        AutomationProperties.Name="{x:Static avalonDockProperties:Resources.Active_Files}"
                        Background="Transparent"
                        ItemContainerStyle="{StaticResource NavigatorWindowListBoxItemStyle}"
                        ItemsSource="{Binding Documents}"
                        SelectedItem="{Binding SelectedDocument, Mode=TwoWay}">
                        <ListBox.ItemTemplate>
                          <DataTemplate>
                            <Grid>
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16" />
                                <ColumnDefinition Width="150" />
                              </Grid.ColumnDefinitions>
                              <!--<Image Source="{Binding LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />-->
                              <TextBlock
                                Grid.Column="1"
                                Margin="4,0,0,0"
                                Text="{Binding LayoutElement.Title}"
                                TextTrimming="CharacterEllipsis" />
                            </Grid>
                          </DataTemplate>
                        </ListBox.ItemTemplate>
                        <ListBox.ItemsPanel>
                          <ItemsPanelTemplate>
                            <WrapPanel Orientation="Vertical" />
                          </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                      </ListBox>
                    </Grid>
                  </Grid>
                </Border>

                <Grid Grid.Row="2" Margin="5">
                  <TextBlock
                    VerticalAlignment="Center"
                    Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.NavigatorWindowForeground}}"
                    Text="{Binding SelectedDocument.LayoutElement.ToolTip, RelativeSource={RelativeSource TemplatedParent}}" />
                </Grid>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="SelectedDocument" Value="{x:Null}">
              <Setter TargetName="selectedElementTitle" Property="Text" Value="{Binding SelectedAnchorable.LayoutElement.Title}" />
              <Setter TargetName="selectedElementDescription" Property="Text" Value="{x:Null}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>
